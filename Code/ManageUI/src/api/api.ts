/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *  
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
     
import url from 'url'; 
const portableFetch = fetch;
import { Configuration } from './configuration';

//const BASE_PATH = "http://220.165.143.73:666".replace(/\/+$/, "");
const BASE_PATH =
	location.host.indexOf('localhost:800') >= 0 
		? `${location.protocol}//${location.host}/api`.replace(/\/+$/, '')
		: `${location.protocol}//${location.host}`.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AboutOutput
 */
export interface AboutOutput {
    /**
     * 
     * @type {string}
     * @memberof AboutOutput
     */
    aboutUrl?: string;
}

/**
 * 
 * @export
 * @interface AcceptFriendshipRequestInput
 */
export interface AcceptFriendshipRequestInput {
    /**
     * 
     * @type {number}
     * @memberof AcceptFriendshipRequestInput
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof AcceptFriendshipRequestInput
     */
    tenantId?: number;
}

/**
 * 
 * @export
 * @interface AppEditionDto
 */
export interface AppEditionDto {
    /**
     * 
     * @type {string}
     * @memberof AppEditionDto
     */
    creationTime?: string;
    /**
     * 
     * @type {string}
     * @memberof AppEditionDto
     */
    appType?: string;
    /**
     * 
     * @type {number}
     * @memberof AppEditionDto
     */
    id?: number;
    /**
     * Itunes连接
     * @type {string}
     * @memberof AppEditionDto
     */
    itunesUrl?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof AppEditionDto
     */
    version?: string;
    /**
     * 关于
     * @type {string}
     * @memberof AppEditionDto
     */
    aboutUrl?: string;
    /**
     * 安装包
     * @type {string}
     * @memberof AppEditionDto
     */
    installationPackage?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof AppEditionDto
     */
    isMandatoryUpdate?: boolean;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof AppEditionDto
     */
    isActive?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof AppEditionDto
     */
    describe?: string;
}

/**
 * 
 * @export
 * @interface ApplicationInfoDto
 */
export interface ApplicationInfoDto {
    /**
     * 
     * @type {string}
     * @memberof ApplicationInfoDto
     */
    version?: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationInfoDto
     */
    releaseDate?: Date;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof ApplicationInfoDto
     */
    features?: { [key: string]: boolean; };
}

/**
 * 数组信息
 * @export
 * @interface ArrayDtoInt64
 */
export interface ArrayDtoInt64 {
    /**
     * 数据
     * @type {Array<number>}
     * @memberof ArrayDtoInt64
     */
    value: Array<number>;
}

/**
 * 
 * @export
 * @interface AuditLogListDto
 */
export interface AuditLogListDto {
    /**
     * 
     * @type {number}
     * @memberof AuditLogListDto
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    userName?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditLogListDto
     */
    impersonatorTenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof AuditLogListDto
     */
    impersonatorUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    methodName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    parameters?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    executionTime?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditLogListDto
     */
    executionDuration?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    clientIpAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    browserInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    exception?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogListDto
     */
    customData?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditLogListDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface AuthenticateModel
 */
export interface AuthenticateModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateModel
     */
    userNameOrEmailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateModel
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticateModel
     */
    rememberClient?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateModel
     */
    captcha?: string;
}

/**
 * 
 * @export
 * @interface AuthenticateResultModel
 */
export interface AuthenticateResultModel {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResultModel
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateResultModel
     */
    encryptedAccessToken?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthenticateResultModel
     */
    expireInSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthenticateResultModel
     */
    userId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticateResultModel
     */
    hasOtherEntrance?: boolean;
}

/**
 * 
 * @export
 * @interface BatchActiveUserInput
 */
export interface BatchActiveUserInput {
    /**
     * 用户Id
     * @type {Array<number>}
     * @memberof BatchActiveUserInput
     */
    ids?: Array<number>;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof BatchActiveUserInput
     */
    isActive?: boolean;
}

/**
 * 
 * @export
 * @interface BatchToDestination
 */
export interface BatchToDestination {
    /**
     * 
     * @type {Array<ObjectKey>}
     * @memberof BatchToDestination
     */
    source: Array<ObjectKey>;
    /**
     * 
     * @type {ObjectKey}
     * @memberof BatchToDestination
     */
    destination: ObjectKey;
}

/**
 * 加or减标签
 * @export
 * @interface BatchUpdateTagInput
 */
export interface BatchUpdateTagInput {
    /**
     * 
     * @type {Array<ObjectKey>}
     * @memberof BatchUpdateTagInput
     */
    source: Array<ObjectKey>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BatchUpdateTagInput
     */
    tagNames?: Array<string>;
}

/**
 * 绑定账号参数
 * @export
 * @interface BindingThirdPartyInput
 */
export interface BindingThirdPartyInput {
    /**
     * 用户名
     * @type {string}
     * @memberof BindingThirdPartyInput
     */
    userName?: string;
    /**
     * 密码
     * @type {string}
     * @memberof BindingThirdPartyInput
     */
    password?: string;
    /**
     * 认证令牌
     * @type {string}
     * @memberof BindingThirdPartyInput
     */
    token?: string;
}

/**
 * 
 * @export
 * @interface BlockUserInput
 */
export interface BlockUserInput {
    /**
     * 
     * @type {number}
     * @memberof BlockUserInput
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof BlockUserInput
     */
    tenantId?: number;
}

/**
 * 
 * @export
 * @interface Bucket430
 */
export interface Bucket430 {
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    storageClass?: Bucket430.StorageClassEnum;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    cannedAccessControl?: Bucket430.CannedAccessControlEnum;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    allowedOrigins?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bucket430
     */
    allowedOrigins?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    allowedMethods?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bucket430
     */
    allowedMethods?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    allowedHeaders?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bucket430
     */
    allowedHeaders?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    exposedHeaders?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bucket430
     */
    exposedHeaders?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    maxAgeSeconds?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Bucket430
     */
    allowEmptyReferer?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Bucket430
     */
    refererList?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bucket430
     */
    refererList?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Bucket430
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    deleterUserId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Bucket430
     */
    deletionTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Bucket430
     */
    lastModificationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    lastModifierUserId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Bucket430
     */
    creationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    creatorUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof Bucket430
     */
    id?: number;
}

/**
 * @export
 * @namespace Bucket430
 */
export namespace Bucket430 {
    /**
     * @export
     * @enum {string}
     */
    export enum StorageClassEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CannedAccessControlEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}

/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    currentPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface ChangePasswordInput
 */
export interface ChangePasswordInput {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    currentPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface ChangeUiThemeInput
 */
export interface ChangeUiThemeInput {
    /**
     * 
     * @type {string}
     * @memberof ChangeUiThemeInput
     */
    theme: string;
}

/**
 * 
 * @export
 * @interface ChangeUserLanguageDto
 */
export interface ChangeUserLanguageDto {
    /**
     * 
     * @type {string}
     * @memberof ChangeUserLanguageDto
     */
    languageName: string;
}

/**
 * 
 * @export
 * @interface ChangeUserPasswordInput
 */
export interface ChangeUserPasswordInput {
    /**
     * 
     * @type {number}
     * @memberof ChangeUserPasswordInput
     */
    userId: number;
    /**
     * 
     * @type {string}
     * @memberof ChangeUserPasswordInput
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface ChatMessageDto
 */
export interface ChatMessageDto {
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    tenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    targetUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    targetTenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    side?: ChatMessageDto.SideEnum;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    readState?: ChatMessageDto.ReadStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageDto
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatMessageDto
     */
    creationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageDto
     */
    id?: number;
}

/**
 * @export
 * @namespace ChatMessageDto
 */
export namespace ChatMessageDto {
    /**
     * @export
     * @enum {string}
     */
    export enum SideEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ReadStateEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface CheckCodeInput
 */
export interface CheckCodeInput {
    /**
     * 完成时x轴对于左上角位置位置
     * @type {number}
     * @memberof CheckCodeInput
     */
    point: number;
    /**
     * 滑动过程特征
     * @type {string}
     * @memberof CheckCodeInput
     */
    dateList?: string;
    /**
     * 耗时
     * @type {string}
     * @memberof CheckCodeInput
     */
    timespan?: string;
}

/**
 * 
 * @export
 * @interface CheckCodeOutput
 */
export interface CheckCodeOutput {
    /**
     * 
     * @type {boolean}
     * @memberof CheckCodeOutput
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckCodeOutput
     */
    token?: string;
}

/**
 * 
 * @export
 * @interface CheckUpdateOutput
 */
export interface CheckUpdateOutput {
    /**
     * 
     * @type {string}
     * @memberof CheckUpdateOutput
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdateOutput
     */
    downloadtUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdateOutput
     */
    itunesUrl?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof CheckUpdateOutput
     */
    isMandatoryUpdate?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof CheckUpdateOutput
     */
    describe?: string;
    /**
     * 
     * @type {string}
     * @memberof CheckUpdateOutput
     */
    aboutUrl?: string;
}

/**
 * 
 * @export
 * @interface Claim
 */
export interface Claim {
    /**
     * 
     * @type {string}
     * @memberof Claim
     */
    issuer?: string;
    /**
     * 
     * @type {string}
     * @memberof Claim
     */
    originalIssuer?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Claim
     */
    properties?: { [key: string]: string; };
    /**
     * 
     * @type {ClaimsIdentity}
     * @memberof Claim
     */
    subject?: ClaimsIdentity;
    /**
     * 
     * @type {string}
     * @memberof Claim
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Claim
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof Claim
     */
    valueType?: string;
}

/**
 * 
 * @export
 * @interface ClaimsIdentity
 */
export interface ClaimsIdentity {
    /**
     * 
     * @type {string}
     * @memberof ClaimsIdentity
     */
    authenticationType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClaimsIdentity
     */
    isAuthenticated?: boolean;
    /**
     * 
     * @type {ClaimsIdentity}
     * @memberof ClaimsIdentity
     */
    actor?: ClaimsIdentity;
    /**
     * 
     * @type {any}
     * @memberof ClaimsIdentity
     */
    bootstrapContext?: any;
    /**
     * 
     * @type {Array<Claim>}
     * @memberof ClaimsIdentity
     */
    claims?: Array<Claim>;
    /**
     * 
     * @type {string}
     * @memberof ClaimsIdentity
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimsIdentity
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimsIdentity
     */
    nameClaimType?: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimsIdentity
     */
    roleClaimType?: string;
}

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    protocolType?: string;
    /**
     * 
     * @type {Array<Secret>}
     * @memberof Client
     */
    clientSecrets?: Array<Secret>;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    requireClientSecret?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    clientUri?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    logoUri?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    requireConsent?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    allowRememberConsent?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    allowedGrantTypes?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    requirePkce?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    allowPlainTextPkce?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    allowAccessTokensViaBrowser?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    redirectUris?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    postLogoutRedirectUris?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    frontChannelLogoutUri?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    frontChannelLogoutSessionRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    backChannelLogoutUri?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    backChannelLogoutSessionRequired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    allowOfflineAccess?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    allowedScopes?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    alwaysIncludeUserClaimsInIdToken?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    identityTokenLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    accessTokenLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    authorizationCodeLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    absoluteRefreshTokenLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    slidingRefreshTokenLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    consentLifetime?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    refreshTokenUsage?: Client.RefreshTokenUsageEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    updateAccessTokenClaimsOnRefresh?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    refreshTokenExpiration?: Client.RefreshTokenExpirationEnum;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    accessTokenType?: Client.AccessTokenTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    enableLocalLogin?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    identityProviderRestrictions?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    includeJwtId?: boolean;
    /**
     * 
     * @type {Array<Claim>}
     * @memberof Client
     */
    claims?: Array<Claim>;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    alwaysSendClientClaims?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    clientClaimsPrefix?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    pairWiseSubjectSalt?: string;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    userSsoLifetime?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    userCodeType?: string;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    deviceCodeLifetime?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    allowedCorsOrigins?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Client
     */
    properties?: { [key: string]: string; };
}

/**
 * @export
 * @namespace Client
 */
export namespace Client {
    /**
     * @export
     * @enum {string}
     */
    export enum RefreshTokenUsageEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RefreshTokenExpirationEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AccessTokenTypeEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}

/**
 * 
 * @export
 * @interface ClientDto
 */
export interface ClientDto {
    /**
     * 
     * @type {string}
     * @memberof ClientDto
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDto
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDto
     */
    logoUri?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientDto
     */
    secrets?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientDto
     */
    allowedScopes?: Array<string>;
}

/**
 * 
 * @export
 * @interface ClientSettingDto
 */
export interface ClientSettingDto {
    /**
     * 允许用户注册
     * @type {boolean}
     * @memberof ClientSettingDto
     */
    allowSelfRegistration?: boolean;
    /**
     * 启用微信登录
     * @type {boolean}
     * @memberof ClientSettingDto
     */
    weixinOpenIsEnabled?: boolean;
    /**
     * 启用支付宝登录
     * @type {boolean}
     * @memberof ClientSettingDto
     */
    alipayIsEnabled?: boolean;
    /**
     * 启用QQ登录
     * @type {boolean}
     * @memberof ClientSettingDto
     */
    qqIsEnabled?: boolean;
    /**
     * 启用微博登录
     * @type {boolean}
     * @memberof ClientSettingDto
     */
    weiboIsEnabled?: boolean;
    /**
     * 系统名称
     * @type {string}
     * @memberof ClientSettingDto
     */
    systemName?: string;
}

/**
 * 邮箱地址验证
 * @export
 * @interface ConfirmEmailCodeInput
 */
export interface ConfirmEmailCodeInput {
    /**
     * 密钥
     * @type {string}
     * @memberof ConfirmEmailCodeInput
     */
    code: string;
    /**
     * 邮箱地址
     * @type {string}
     * @memberof ConfirmEmailCodeInput
     */
    email: string;
}

/**
 * 
 * @export
 * @interface CreateAndroidAppEditionInput
 */
export interface CreateAndroidAppEditionInput {
    /**
     * 版本号
     * @type {string}
     * @memberof CreateAndroidAppEditionInput
     */
    version?: string;
    /**
     * 关于
     * @type {string}
     * @memberof CreateAndroidAppEditionInput
     */
    aboutUrl?: string;
    /**
     * 安装包
     * @type {string}
     * @memberof CreateAndroidAppEditionInput
     */
    installationPackage?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof CreateAndroidAppEditionInput
     */
    isMandatoryUpdate?: boolean;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CreateAndroidAppEditionInput
     */
    isActive?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof CreateAndroidAppEditionInput
     */
    describe?: string;
}

/**
 * 
 * @export
 * @interface CreateAppStartPageDto
 */
export interface CreateAppStartPageDto {
    /**
     * 平台 Android = 1, IOS = 2   （创建默认值时，该项可空）
     * @type {number}
     * @memberof CreateAppStartPageDto
     */
    platform?: CreateAppStartPageDto.PlatformEnum;
    /**
     * 分辨率 宽  （创建默认值时，该项可空）
     * @type {number}
     * @memberof CreateAppStartPageDto
     */
    widthPx?: number;
    /**
     * 分辨率 高  （创建默认值时，该项可空）
     * @type {number}
     * @memberof CreateAppStartPageDto
     */
    highPx?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof CreateAppStartPageDto
     */
    url?: string;
}

/**
 * @export
 * @namespace CreateAppStartPageDto
 */
export namespace CreateAppStartPageDto {
    /**
     * @export
     * @enum {string}
     */
    export enum PlatformEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface CreateClientDto
 */
export interface CreateClientDto {
    /**
     * 
     * @type {string}
     * @memberof CreateClientDto
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientDto
     */
    logoUri?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateClientDto
     */
    secrets?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateClientDto
     */
    allowedScopes?: Array<string>;
}

/**
 * 
 * @export
 * @interface CreateDemoDto
 */
export interface CreateDemoDto {
    /**
     * 名称
     * @type {string}
     * @memberof CreateDemoDto
     */
    name?: string;
    /**
     * 介绍
     * @type {string}
     * @memberof CreateDemoDto
     */
    longText?: string;
    /**
     * 组
     * @type {string}
     * @memberof CreateDemoDto
     */
    group?: string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CreateDemoDto
     */
    isActivate?: boolean;
    /**
     * 顺序
     * @type {number}
     * @memberof CreateDemoDto
     */
    sort?: number;
    /**
     * 权
     * @type {number}
     * @memberof CreateDemoDto
     */
    weight?: number;
    /**
     * 发布时间
     * @type {Date}
     * @memberof CreateDemoDto
     */
    publishTime?: Date;
    /**
     * 头像
     * @type {string}
     * @memberof CreateDemoDto
     */
    avatar?: string;
    /**
     * 位置
     * @type {Location}
     * @memberof CreateDemoDto
     */
    location?: Location;
}

/**
 * 
 * @export
 * @interface CreateFriendshipRequestByUserNameInput
 */
export interface CreateFriendshipRequestByUserNameInput {
    /**
     * 
     * @type {string}
     * @memberof CreateFriendshipRequestByUserNameInput
     */
    tenancyName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFriendshipRequestByUserNameInput
     */
    userName?: string;
}

/**
 * 
 * @export
 * @interface CreateFriendshipRequestInput
 */
export interface CreateFriendshipRequestInput {
    /**
     * 
     * @type {number}
     * @memberof CreateFriendshipRequestInput
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFriendshipRequestInput
     */
    tenantId?: number;
}

/**
 * 
 * @export
 * @interface CreateIOSAppEditionInput
 */
export interface CreateIOSAppEditionInput {
    /**
     * Itunes连接
     * @type {string}
     * @memberof CreateIOSAppEditionInput
     */
    itunesUrl?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof CreateIOSAppEditionInput
     */
    version?: string;
    /**
     * 关于
     * @type {string}
     * @memberof CreateIOSAppEditionInput
     */
    aboutUrl?: string;
    /**
     * 安装包
     * @type {string}
     * @memberof CreateIOSAppEditionInput
     */
    installationPackage?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof CreateIOSAppEditionInput
     */
    isMandatoryUpdate?: boolean;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CreateIOSAppEditionInput
     */
    isActive?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof CreateIOSAppEditionInput
     */
    describe?: string;
}

/**
 * 创建菜单参数
 * @export
 * @interface CreateMenuInput
 */
export interface CreateMenuInput {
    /**
     * 上级菜单ID
     * @type {number}
     * @memberof CreateMenuInput
     */
    parentId?: number;
    /**
     * 显示名称
     * @type {string}
     * @memberof CreateMenuInput
     */
    displayName?: string;
    /**
     * 图标名称
     * @type {string}
     * @memberof CreateMenuInput
     */
    icon?: string;
    /**
     * 菜单顺序
     * @type {number}
     * @memberof CreateMenuInput
     */
    order?: number;
    /**
     * 菜单是否可见
     * @type {boolean}
     * @memberof CreateMenuInput
     */
    isVisible?: boolean;
    /**
     * 权限限制
     * @type {string}
     * @memberof CreateMenuInput
     */
    requiredPermissionName?: string;
    /**
     * 目标链接
     * @type {string}
     * @memberof CreateMenuInput
     */
    url?: string;
}

/**
 * 创建组织机构参数
 * @export
 * @interface CreateOrganizationUnitInput
 */
export interface CreateOrganizationUnitInput {
    /**
     * 上级机构ID
     * @type {number}
     * @memberof CreateOrganizationUnitInput
     */
    parentId?: number;
    /**
     * 机构名称
     * @type {string}
     * @memberof CreateOrganizationUnitInput
     */
    displayName: string;
}

/**
 * 
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    displayName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateRoleDto
     */
    permissions?: Array<string>;
}

/**
 * 
 * @export
 * @interface CreateSysFunDto
 */
export interface CreateSysFunDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSysFunDto
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSysFunDto
     */
    tagNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface CreateTenantDto
 */
export interface CreateTenantDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTenantDto
     */
    tenancyName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTenantDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTenantDto
     */
    adminEmailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTenantDto
     */
    connectionString?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTenantDto
     */
    isActive?: boolean;
}

/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserDto
     */
    isActive?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateUserDto
     */
    roleNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    password?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof CreateUserDto
     */
    phoneNumber?: string;
    /**
     * 是否发送激活消息
     * @type {boolean}
     * @memberof CreateUserDto
     */
    sendActivationMessage?: boolean;
    /**
     * 是否发送激活邮件
     * @type {boolean}
     * @memberof CreateUserDto
     */
    sendActivationEmail?: boolean;
    /**
     * 是否设置随机密码
     * @type {boolean}
     * @memberof CreateUserDto
     */
    setRandomPassword?: boolean;
    /**
     * 组织机构
     * @type {Array<number>}
     * @memberof CreateUserDto
     */
    organizations?: Array<number>;
    /**
     * 下次登录需要修改密码
     * @type {boolean}
     * @memberof CreateUserDto
     */
    shouldChangePasswordOnNextLogin?: boolean;
    /**
     * 角色类型  (不可移除初始角色)(创建时只能选一个)
     * @type {Array<number>}
     * @memberof CreateUserDto
     */
    roleTypeList?: Array<CreateUserDto.RoleTypeListEnum>;
    /**
     * [学生、教师] 昵称 可空 （6字以内，允许与其他昵称重复）
     * @type {string}
     * @memberof CreateUserDto
     */
    nickname?: string;
}

/**
 * @export
 * @namespace CreateUserDto
 */
export namespace CreateUserDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
}

/**
 * 
 * @export
 * @interface CurrentUserProfileEditDto
 */
export interface CurrentUserProfileEditDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    surname: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    emailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserProfileEditDto
     */
    timezone?: string;
}

/**
 * 
 * @export
 * @interface DragVerificationDto
 */
export interface DragVerificationDto {
    /**
     * 裁剪图片y轴位置
     * @type {number}
     * @memberof DragVerificationDto
     */
    y?: number;
    /**
     * 无序数组
     * @type {Array<number>}
     * @memberof DragVerificationDto
     */
    array?: Array<number>;
    /**
     * 原图宽
     * @type {number}
     * @memberof DragVerificationDto
     */
    imgX?: number;
    /**
     * 原图高
     * @type {number}
     * @memberof DragVerificationDto
     */
    imgY?: number;
    /**
     * 小图字符串
     * @type {string}
     * @memberof DragVerificationDto
     */
    small?: string;
    /**
     * 原图高
     * @type {string}
     * @memberof DragVerificationDto
     */
    normal?: string;
}

/**
 * 
 * @export
 * @interface EntityDtoGuid
 */
export interface EntityDtoGuid {
    /**
     * 
     * @type {string}
     * @memberof EntityDtoGuid
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface EntityDtoInt64
 */
export interface EntityDtoInt64 {
    /**
     * 
     * @type {number}
     * @memberof EntityDtoInt64
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface ExternalAuthenticateModel
 */
export interface ExternalAuthenticateModel {
    /**
     * 
     * @type {string}
     * @memberof ExternalAuthenticateModel
     */
    authProvider: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalAuthenticateModel
     */
    providerKey: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalAuthenticateModel
     */
    providerAccessCode: string;
}

/**
 * 
 * @export
 * @interface ExternalAuthenticateResultModel
 */
export interface ExternalAuthenticateResultModel {
    /**
     * 
     * @type {string}
     * @memberof ExternalAuthenticateResultModel
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalAuthenticateResultModel
     */
    encryptedAccessToken?: string;
    /**
     * 
     * @type {number}
     * @memberof ExternalAuthenticateResultModel
     */
    expireInSeconds?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ExternalAuthenticateResultModel
     */
    waitingForActivation?: boolean;
}

/**
 * 
 * @export
 * @interface ExternalLoginProviderInfoModel
 */
export interface ExternalLoginProviderInfoModel {
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginProviderInfoModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalLoginProviderInfoModel
     */
    clientId?: string;
}

/**
 * 
 * @export
 * @interface FileDto
 */
export interface FileDto {
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    fileType?: string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    fileToken?: string;
}

/**
 * 
 * @export
 * @interface FirendshipUserDto
 */
export interface FirendshipUserDto {
    /**
     * 
     * @type {number}
     * @memberof FirendshipUserDto
     */
    tenantId?: number;
    /**
     * 
     * @type {string}
     * @memberof FirendshipUserDto
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof FirendshipUserDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FirendshipUserDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof FirendshipUserDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof FirendshipUserDto
     */
    creationTime?: string;
    /**
     * 
     * @type {number}
     * @memberof FirendshipUserDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface FlatPermissionDto
 */
export interface FlatPermissionDto {
    /**
     * 
     * @type {string}
     * @memberof FlatPermissionDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FlatPermissionDto
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof FlatPermissionDto
     */
    description?: string;
}

/**
 * 
 * @export
 * @interface FlatPermissionWithLevelDto
 */
export interface FlatPermissionWithLevelDto {
    /**
     * 
     * @type {number}
     * @memberof FlatPermissionWithLevelDto
     */
    level?: number;
    /**
     * �ϼ�����
     * @type {string}
     * @memberof FlatPermissionWithLevelDto
     */
    parentName?: string;
    /**
     * ����
     * @type {string}
     * @memberof FlatPermissionWithLevelDto
     */
    name?: string;
    /**
     * ��ʾ����
     * @type {string}
     * @memberof FlatPermissionWithLevelDto
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof FlatPermissionWithLevelDto
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FlatPermissionWithLevelDto
     */
    isGrantedByDefault?: boolean;
}

/**
 * 
 * @export
 * @interface FriendDto
 */
export interface FriendDto {
    /**
     * 
     * @type {number}
     * @memberof FriendDto
     */
    friendUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof FriendDto
     */
    friendTenantId?: number;
    /**
     * 
     * @type {string}
     * @memberof FriendDto
     */
    friendUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendDto
     */
    friendTenancyName?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendDto
     */
    friendProfilePictureId?: string;
    /**
     * 
     * @type {number}
     * @memberof FriendDto
     */
    unreadMessageCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FriendDto
     */
    isOnline?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FriendDto
     */
    state?: FriendDto.StateEnum;
}

/**
 * @export
 * @namespace FriendDto
 */
export namespace FriendDto {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface GeetestAppCheckInput
 */
export interface GeetestAppCheckInput {
    /**
     * 
     * @type {string}
     * @memberof GeetestAppCheckInput
     */
    geetestChallenge: string;
    /**
     * 
     * @type {string}
     * @memberof GeetestAppCheckInput
     */
    geetestValidate: string;
    /**
     * 
     * @type {string}
     * @memberof GeetestAppCheckInput
     */
    geetestSeccode: string;
}

/**
 * 
 * @export
 * @interface GeetestCheckInput
 */
export interface GeetestCheckInput {
    /**
     * 
     * @type {string}
     * @memberof GeetestCheckInput
     */
    challenge: string;
    /**
     * 
     * @type {string}
     * @memberof GeetestCheckInput
     */
    validate: string;
    /**
     * 
     * @type {string}
     * @memberof GeetestCheckInput
     */
    seccode: string;
}

/**
 * 
 * @export
 * @interface GeetestCheckOutput
 */
export interface GeetestCheckOutput {
    /**
     * 
     * @type {number}
     * @memberof GeetestCheckOutput
     */
    success?: number;
    /**
     * 
     * @type {string}
     * @memberof GeetestCheckOutput
     */
    challenge?: string;
    /**
     * 
     * @type {string}
     * @memberof GeetestCheckOutput
     */
    gt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GeetestCheckOutput
     */
    newCaptcha?: boolean;
}

/**
 * 
 * @export
 * @interface GetAboutAndCheckUpdateOutput
 */
export interface GetAboutAndCheckUpdateOutput {
    /**
     * 
     * @type {AboutOutput}
     * @memberof GetAboutAndCheckUpdateOutput
     */
    about?: AboutOutput;
    /**
     * 
     * @type {CheckUpdateOutput}
     * @memberof GetAboutAndCheckUpdateOutput
     */
    checkUpdate?: CheckUpdateOutput;
}

/**
 * 
 * @export
 * @interface GetAppStartPageDto
 */
export interface GetAppStartPageDto {
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetAppStartPageDto
     */
    creationTime?: Date;
    /**
     * 创建时间
     * @type {string}
     * @memberof GetAppStartPageDto
     */
    creationTime?: string;
    /**
     * 最后一次修改时间
     * @type {Date}
     * @memberof GetAppStartPageDto
     */
    lastModificationTime?: Date;
    /**
     * 最后一次修改时间
     * @type {string}
     * @memberof GetAppStartPageDto
     */
    lastModificationTime?: string;
    /**
     * 更新时间
     * @type {Date}
     * @memberof GetAppStartPageDto
     */
    updateTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof GetAppStartPageDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAppStartPageDto
     */
    fileName?: string;
    /**
     * 平台 Android = 1, IOS = 2   （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetAppStartPageDto
     */
    platform?: GetAppStartPageDto.PlatformEnum;
    /**
     * 分辨率 宽  （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetAppStartPageDto
     */
    widthPx?: number;
    /**
     * 分辨率 高  （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetAppStartPageDto
     */
    highPx?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof GetAppStartPageDto
     */
    url?: string;
}

/**
 * @export
 * @namespace GetAppStartPageDto
 */
export namespace GetAppStartPageDto {
    /**
     * @export
     * @enum {string}
     */
    export enum PlatformEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface GetCurrentLoginInformationsOutput
 */
export interface GetCurrentLoginInformationsOutput {
    /**
     * 
     * @type {ApplicationInfoDto}
     * @memberof GetCurrentLoginInformationsOutput
     */
    application?: ApplicationInfoDto;
    /**
     * 
     * @type {UserLoginInfoDto}
     * @memberof GetCurrentLoginInformationsOutput
     */
    user?: UserLoginInfoDto;
    /**
     * 
     * @type {TenantLoginInfoDto}
     * @memberof GetCurrentLoginInformationsOutput
     */
    tenant?: TenantLoginInfoDto;
}

/**
 * 
 * @export
 * @interface GetDemoDto
 */
export interface GetDemoDto {
    /**
     * 上一个 下一个
     * @type {PreviousAndNextDemo}
     * @memberof GetDemoDto
     */
    previousAndNext?: PreviousAndNextDemo;
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetDemoDto
     */
    creationTime?: Date;
    /**
     * 创建时间
     * @type {string}
     * @memberof GetDemoDto
     */
    creationTime?: string;
    /**
     * 最后一次修改时间
     * @type {Date}
     * @memberof GetDemoDto
     */
    lastModificationTime?: Date;
    /**
     * 最后一次修改时间
     * @type {string}
     * @memberof GetDemoDto
     */
    lastModificationTime?: string;
    /**
     * 
     * @type {number}
     * @memberof GetDemoDto
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof GetDemoDto
     */
    name?: string;
    /**
     * 介绍
     * @type {string}
     * @memberof GetDemoDto
     */
    longText?: string;
    /**
     * 组
     * @type {string}
     * @memberof GetDemoDto
     */
    group?: string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof GetDemoDto
     */
    isActivate?: boolean;
    /**
     * 顺序
     * @type {number}
     * @memberof GetDemoDto
     */
    sort?: number;
    /**
     * 权
     * @type {number}
     * @memberof GetDemoDto
     */
    weight?: number;
    /**
     * 发布时间
     * @type {Date}
     * @memberof GetDemoDto
     */
    publishTime?: Date;
    /**
     * 头像
     * @type {string}
     * @memberof GetDemoDto
     */
    avatar?: string;
    /**
     * 位置
     * @type {Location}
     * @memberof GetDemoDto
     */
    location?: Location;
}

/**
 * 
 * @export
 * @interface GetFileSettingDemoDto
 */
export interface GetFileSettingDemoDto {
    /**
     * 
     * @type {Date}
     * @memberof GetFileSettingDemoDto
     */
    lastModificationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof GetFileSettingDemoDto
     */
    id?: number;
    /**
     * 文件大小限制
     * @type {number}
     * @memberof GetFileSettingDemoDto
     */
    fileSize?: number;
    /**
     * 文件格式限制
     * @type {string}
     * @memberof GetFileSettingDemoDto
     */
    fileExtension?: string;
}

/**
 * 
 * @export
 * @interface GetGroupAndTagListDto
 */
export interface GetGroupAndTagListDto {
    /**
     * 组名
     * @type {string}
     * @memberof GetGroupAndTagListDto
     */
    name?: string;
    /**
     * Id
     * @type {number}
     * @memberof GetGroupAndTagListDto
     */
    value?: number;
    /**
     * 标签
     * @type {Array<string>}
     * @memberof GetGroupAndTagListDto
     */
    tags?: Array<string>;
}

/**
 * 
 * @export
 * @interface GetListAppStartPageDto
 */
export interface GetListAppStartPageDto {
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetListAppStartPageDto
     */
    creationTime?: Date;
    /**
     * 创建时间
     * @type {string}
     * @memberof GetListAppStartPageDto
     */
    creationTime?: string;
    /**
     * 最后一次修改时间
     * @type {Date}
     * @memberof GetListAppStartPageDto
     */
    lastModificationTime?: Date;
    /**
     * 最后一次修改时间
     * @type {string}
     * @memberof GetListAppStartPageDto
     */
    lastModificationTime?: string;
    /**
     * 更新时间
     * @type {Date}
     * @memberof GetListAppStartPageDto
     */
    updateTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof GetListAppStartPageDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetListAppStartPageDto
     */
    fileName?: string;
    /**
     * 平台 Android = 1, IOS = 2   （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetListAppStartPageDto
     */
    platform?: GetListAppStartPageDto.PlatformEnum;
    /**
     * 分辨率 宽  （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetListAppStartPageDto
     */
    widthPx?: number;
    /**
     * 分辨率 高  （创建默认值时，该项可空）
     * @type {number}
     * @memberof GetListAppStartPageDto
     */
    highPx?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof GetListAppStartPageDto
     */
    url?: string;
}

/**
 * @export
 * @namespace GetListAppStartPageDto
 */
export namespace GetListAppStartPageDto {
    /**
     * @export
     * @enum {string}
     */
    export enum PlatformEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface GetListDemoDto
 */
export interface GetListDemoDto {
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetListDemoDto
     */
    creationTime?: Date;
    /**
     * 创建时间
     * @type {string}
     * @memberof GetListDemoDto
     */
    creationTime?: string;
    /**
     * 最后一次修改时间
     * @type {Date}
     * @memberof GetListDemoDto
     */
    lastModificationTime?: Date;
    /**
     * 最后一次修改时间
     * @type {string}
     * @memberof GetListDemoDto
     */
    lastModificationTime?: string;
    /**
     * 
     * @type {number}
     * @memberof GetListDemoDto
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof GetListDemoDto
     */
    name?: string;
    /**
     * 介绍
     * @type {string}
     * @memberof GetListDemoDto
     */
    longText?: string;
    /**
     * 组
     * @type {string}
     * @memberof GetListDemoDto
     */
    group?: string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof GetListDemoDto
     */
    isActivate?: boolean;
    /**
     * 顺序
     * @type {number}
     * @memberof GetListDemoDto
     */
    sort?: number;
    /**
     * 权
     * @type {number}
     * @memberof GetListDemoDto
     */
    weight?: number;
    /**
     * 发布时间
     * @type {Date}
     * @memberof GetListDemoDto
     */
    publishTime?: Date;
    /**
     * 头像
     * @type {string}
     * @memberof GetListDemoDto
     */
    avatar?: string;
    /**
     * 位置
     * @type {Location}
     * @memberof GetListDemoDto
     */
    location?: Location;
}

/**
 * 
 * @export
 * @interface GetListSysFunDto
 */
export interface GetListSysFunDto {
    /**
     * 创建时间
     * @type {Date}
     * @memberof GetListSysFunDto
     */
    creationTime?: Date;
    /**
     * 创建时间
     * @type {string}
     * @memberof GetListSysFunDto
     */
    creationTime?: string;
    /**
     * 最后一次修改时间
     * @type {Date}
     * @memberof GetListSysFunDto
     */
    lastModificationTime?: Date;
    /**
     * 最后一次修改时间
     * @type {string}
     * @memberof GetListSysFunDto
     */
    lastModificationTime?: string;
    /**
     * 
     * @type {number}
     * @memberof GetListSysFunDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetListSysFunDto
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetListSysFunDto
     */
    tagNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface GetNotificationSettingsOutput
 */
export interface GetNotificationSettingsOutput {
    /**
     * 
     * @type {boolean}
     * @memberof GetNotificationSettingsOutput
     */
    receiveNotifications?: boolean;
    /**
     * 
     * @type {Array<NotificationSubscriptionWithDisplayNameDto>}
     * @memberof GetNotificationSettingsOutput
     */
    notifications?: Array<NotificationSubscriptionWithDisplayNameDto>;
}

/**
 * 
 * @export
 * @interface GetNotificationsOutput
 */
export interface GetNotificationsOutput {
    /**
     * 
     * @type {number}
     * @memberof GetNotificationsOutput
     */
    unreadCount?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNotificationsOutput
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<UserNotification>}
     * @memberof GetNotificationsOutput
     */
    items?: Array<UserNotification>;
}

/**
 * 
 * @export
 * @interface GetPasswordComplexitySettingOutput
 */
export interface GetPasswordComplexitySettingOutput {
    /**
     * 
     * @type {PasswordComplexitySetting}
     * @memberof GetPasswordComplexitySettingOutput
     */
    setting?: PasswordComplexitySetting;
}

/**
 * 
 * @export
 * @interface GetRoleForEditOutput
 */
export interface GetRoleForEditOutput {
    /**
     * 
     * @type {RoleEditDto}
     * @memberof GetRoleForEditOutput
     */
    role?: RoleEditDto;
    /**
     * 
     * @type {Array<FlatPermissionDto>}
     * @memberof GetRoleForEditOutput
     */
    permissions?: Array<FlatPermissionDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRoleForEditOutput
     */
    grantedPermissionNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface GetUserChatFriendsWithSettingsOutput
 */
export interface GetUserChatFriendsWithSettingsOutput {
    /**
     * 
     * @type {Date}
     * @memberof GetUserChatFriendsWithSettingsOutput
     */
    serverTime?: Date;
    /**
     * 
     * @type {Array<FriendDto>}
     * @memberof GetUserChatFriendsWithSettingsOutput
     */
    friends?: Array<FriendDto>;
    /**
     * 
     * @type {Array<FriendDto>}
     * @memberof GetUserChatFriendsWithSettingsOutput
     */
    blockes?: Array<FriendDto>;
}

/**
 * 获取编辑用户信息
 * @export
 * @interface GetUserForEditOutput
 */
export interface GetUserForEditOutput {
    /**
     * 头像ID
     * @type {string}
     * @memberof GetUserForEditOutput
     */
    profilePictureId?: string;
    /**
     * 用户信息
     * @type {UserEditDto}
     * @memberof GetUserForEditOutput
     */
    user?: UserEditDto;
    /**
     * 角色信息
     * @type {Array<UserRoleDto>}
     * @memberof GetUserForEditOutput
     */
    roles?: Array<UserRoleDto>;
    /**
     * 组织机构信息
     * @type {Array<number>}
     * @memberof GetUserForEditOutput
     */
    organizationIds?: Array<number>;
}

/**
 * 用户权值
 * @export
 * @interface GetUserPermissionsForEditOutput
 */
export interface GetUserPermissionsForEditOutput {
    /**
     * 权值
     * @type {Array<PermissionViewDto>}
     * @memberof GetUserPermissionsForEditOutput
     */
    permissions?: Array<PermissionViewDto>;
    /**
     * 已授予的权值
     * @type {Array<string>}
     * @memberof GetUserPermissionsForEditOutput
     */
    grantedPermissionNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface GroupFileDto
 */
export interface GroupFileDto {
    /**
     * 
     * @type {string}
     * @memberof GroupFileDto
     */
    group?: string;
    /**
     * 
     * @type {Array<OssETagFileDto>}
     * @memberof GroupFileDto
     */
    fileInfo?: Array<OssETagFileDto>;
}

/**
 * 
 * @export
 * @interface IsTenantAvailableInput
 */
export interface IsTenantAvailableInput {
    /**
     * 
     * @type {string}
     * @memberof IsTenantAvailableInput
     */
    tenancyName: string;
}

/**
 * 
 * @export
 * @interface IsTenantAvailableOutput
 */
export interface IsTenantAvailableOutput {
    /**
     * 
     * @type {number}
     * @memberof IsTenantAvailableOutput
     */
    state?: IsTenantAvailableOutput.StateEnum;
    /**
     * 
     * @type {number}
     * @memberof IsTenantAvailableOutput
     */
    tenantId?: number;
}

/**
 * @export
 * @namespace IsTenantAvailableOutput
 */
export namespace IsTenantAvailableOutput {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}

/**
 * 
 * @export
 * @interface IsUpatedInput
 */
export interface IsUpatedInput {
    /**
     * 本地图片的更新时间
     * @type {Date}
     * @memberof IsUpatedInput
     */
    updateTime?: Date;
    /**
     * 平台 Android = 1, IOS = 2   （创建默认值时，该项可空）
     * @type {number}
     * @memberof IsUpatedInput
     */
    platform?: IsUpatedInput.PlatformEnum;
    /**
     * 分辨率 宽  （创建默认值时，该项可空）
     * @type {number}
     * @memberof IsUpatedInput
     */
    widthPx?: number;
    /**
     * 分辨率 高  （创建默认值时，该项可空）
     * @type {number}
     * @memberof IsUpatedInput
     */
    highPx?: number;
}

/**
 * @export
 * @namespace IsUpatedInput
 */
export namespace IsUpatedInput {
    /**
     * @export
     * @enum {string}
     */
    export enum PlatformEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface ListResultDtoChatMessageDto
 */
export interface ListResultDtoChatMessageDto {
    /**
     * 
     * @type {Array<ChatMessageDto>}
     * @memberof ListResultDtoChatMessageDto
     */
    items?: Array<ChatMessageDto>;
}

/**
 * 
 * @export
 * @interface ListResultDtoFlatPermissionWithLevelDto
 */
export interface ListResultDtoFlatPermissionWithLevelDto {
    /**
     * 
     * @type {Array<FlatPermissionWithLevelDto>}
     * @memberof ListResultDtoFlatPermissionWithLevelDto
     */
    items?: Array<FlatPermissionWithLevelDto>;
}

/**
 * 
 * @export
 * @interface ListResultDtoOrganizationUnitDto
 */
export interface ListResultDtoOrganizationUnitDto {
    /**
     * 
     * @type {Array<OrganizationUnitDto>}
     * @memberof ListResultDtoOrganizationUnitDto
     */
    items?: Array<OrganizationUnitDto>;
}

/**
 * 
 * @export
 * @interface ListResultDtoPermissionDto
 */
export interface ListResultDtoPermissionDto {
    /**
     * 
     * @type {Array<PermissionDto>}
     * @memberof ListResultDtoPermissionDto
     */
    items?: Array<PermissionDto>;
}

/**
 * 
 * @export
 * @interface ListResultDtoRoleListDto
 */
export interface ListResultDtoRoleListDto {
    /**
     * 
     * @type {Array<RoleListDto>}
     * @memberof ListResultDtoRoleListDto
     */
    items?: Array<RoleListDto>;
}

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    longitude?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    latitude?: string;
}

/**
 * 
 * @export
 * @interface MarkAllUnreadMessagesOfUserAsReadInput
 */
export interface MarkAllUnreadMessagesOfUserAsReadInput {
    /**
     * 
     * @type {number}
     * @memberof MarkAllUnreadMessagesOfUserAsReadInput
     */
    tenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof MarkAllUnreadMessagesOfUserAsReadInput
     */
    userId?: number;
}

/**
 * 菜单
 * @export
 * @interface MenuDto
 */
export interface MenuDto {
    /**
     * 上级菜单
     * @type {number}
     * @memberof MenuDto
     */
    parentId?: number;
    /**
     * 名称
     * @type {string}
     * @memberof MenuDto
     */
    name?: string;
    /**
     * 显示名称
     * @type {string}
     * @memberof MenuDto
     */
    displayName?: string;
    /**
     * 图标名称
     * @type {string}
     * @memberof MenuDto
     */
    icon?: string;
    /**
     * 是否叶子节点
     * @type {boolean}
     * @memberof MenuDto
     */
    isLeaf?: boolean;
    /**
     * 菜单顺序
     * @type {number}
     * @memberof MenuDto
     */
    order?: number;
    /**
     * 菜单是否可用
     * @type {boolean}
     * @memberof MenuDto
     */
    isEnabled?: boolean;
    /**
     * 菜单是否可见
     * @type {boolean}
     * @memberof MenuDto
     */
    isVisible?: boolean;
    /**
     * 权限限制
     * @type {string}
     * @memberof MenuDto
     */
    requiredPermissionName?: string;
    /**
     * 是否需要登录才可查看菜单
     * @type {boolean}
     * @memberof MenuDto
     */
    requiresAuthentication?: boolean;
    /**
     * 打开方式 \"_blank\", \"_self\", \"_parent\", \"_top\"或者iframe名字
     * @type {string}
     * @memberof MenuDto
     */
    target?: string;
    /**
     * 目标链接
     * @type {string}
     * @memberof MenuDto
     */
    url?: string;
    /**
     * 是否系统菜单
     * @type {boolean}
     * @memberof MenuDto
     */
    isSystem?: boolean;
    /**
     * 子菜单
     * @type {Array<MenuDto>}
     * @memberof MenuDto
     */
    items?: Array<MenuDto>;
    /**
     * 
     * @type {number}
     * @memberof MenuDto
     */
    id?: number;
}

/**
 * 移动菜单项
 * @export
 * @interface MoveMenuInput
 */
export interface MoveMenuInput {
    /**
     * 菜单ID
     * @type {number}
     * @memberof MoveMenuInput
     */
    id?: number;
    /**
     * 新的上级菜单
     * @type {number}
     * @memberof MoveMenuInput
     */
    newParentId?: number;
    /**
     * 菜单新顺序
     * @type {number}
     * @memberof MoveMenuInput
     */
    newOrder?: number;
}

/**
 * 移动组织机构请求
 * @export
 * @interface MoveOrganizationUnitInput
 */
export interface MoveOrganizationUnitInput {
    /**
     * 组织机构ID
     * @type {number}
     * @memberof MoveOrganizationUnitInput
     */
    id?: number;
    /**
     * 新的上级组织机构ID
     * @type {number}
     * @memberof MoveOrganizationUnitInput
     */
    newParentId?: number;
}

/**
 * 
 * @export
 * @interface MultiFieldInput
 */
export interface MultiFieldInput {
    /**
     * 
     * @type {number}
     * @memberof MultiFieldInput
     */
    occur?: MultiFieldInput.OccurEnum;
    /**
     * 
     * @type {string}
     * @memberof MultiFieldInput
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof MultiFieldInput
     */
    keyword?: string;
}

/**
 * @export
 * @namespace MultiFieldInput
 */
export namespace MultiFieldInput {
    /**
     * @export
     * @enum {string}
     */
    export enum OccurEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface NameValueDto
 */
export interface NameValueDto {
    /**
     * 
     * @type {string}
     * @memberof NameValueDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NameValueDto
     */
    value?: string;
}

/**
 * 
 * @export
 * @interface NameValueDtoInt32
 */
export interface NameValueDtoInt32 {
    /**
     * 
     * @type {string}
     * @memberof NameValueDtoInt32
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof NameValueDtoInt32
     */
    value?: number;
}

/**
 * 
 * @export
 * @interface NotificationData
 */
export interface NotificationData {
    /**
     * 
     * @type {string}
     * @memberof NotificationData
     */
    type?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof NotificationData
     */
    properties?: { [key: string]: any; };
}

/**
 * 
 * @export
 * @interface NotificationSubscriptionDto
 */
export interface NotificationSubscriptionDto {
    /**
     * 
     * @type {string}
     * @memberof NotificationSubscriptionDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSubscriptionDto
     */
    isSubscribed?: boolean;
}

/**
 * 
 * @export
 * @interface NotificationSubscriptionWithDisplayNameDto
 */
export interface NotificationSubscriptionWithDisplayNameDto {
    /**
     * 
     * @type {string}
     * @memberof NotificationSubscriptionWithDisplayNameDto
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationSubscriptionWithDisplayNameDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationSubscriptionWithDisplayNameDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSubscriptionWithDisplayNameDto
     */
    isSubscribed?: boolean;
}

/**
 * 
 * @export
 * @interface OSSObjectDto
 */
export interface OSSObjectDto {
    /**
     * 
     * @type {number}
     * @memberof OSSObjectDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    bucketName?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    extensionName?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    eTag?: string;
    /**
     * 
     * @type {number}
     * @memberof OSSObjectDto
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof OSSObjectDto
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof OSSObjectDto
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    size?: string;
    /**
     * 
     * @type {Date}
     * @memberof OSSObjectDto
     */
    lastModified?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof OSSObjectDto
     */
    isFile?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    officeViewUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OSSObjectDto
     */
    isImage?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OSSObjectDto
     */
    icon?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OSSObjectDto
     */
    tagNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface OSSSettingDto
 */
export interface OSSSettingDto {
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    officeOnlineServerUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof OSSSettingDto
     */
    bucketCounct?: number;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    bucketPrefix?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    contextStore?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    prohibitedFileType?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    allowedOrigins?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    allowedMethods?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    allowedHeaders?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    exposedHeaders?: string;
    /**
     * 
     * @type {number}
     * @memberof OSSSettingDto
     */
    maxAgeSeconds?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OSSSettingDto
     */
    allowEmptyReferer?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    referer?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    fS430Endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    fS430AccessKey?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    fS430FileType?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    aliyunEndpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    aliyunAccessKeyId?: string;
    /**
     * 
     * @type {string}
     * @memberof OSSSettingDto
     */
    aliyunAccessKeySecret?: string;
}

/**
 * 
 * @export
 * @interface ObjectKey
 */
export interface ObjectKey {
    /**
     * 
     * @type {string}
     * @memberof ObjectKey
     */
    bucketName: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectKey
     */
    key?: string;
}

/**
 * 组织机构信息
 * @export
 * @interface OrganizationUnitDto
 */
export interface OrganizationUnitDto {
    /**
     * 上级机构ID
     * @type {number}
     * @memberof OrganizationUnitDto
     */
    parentId?: number;
    /**
     * 机构Code
     * @type {string}
     * @memberof OrganizationUnitDto
     */
    code?: string;
    /**
     * 机构名称
     * @type {string}
     * @memberof OrganizationUnitDto
     */
    displayName?: string;
    /**
     * 组织机构人员数量
     * @type {number}
     * @memberof OrganizationUnitDto
     */
    memberCount?: number;
    /**
     * 下级组织机构
     * @type {Array<OrganizationUnitDto>}
     * @memberof OrganizationUnitDto
     */
    children?: Array<OrganizationUnitDto>;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationUnitDto
     */
    lastModificationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUnitDto
     */
    lastModifierUserId?: number;
    /**
     * 
     * @type {Date}
     * @memberof OrganizationUnitDto
     */
    creationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUnitDto
     */
    creatorUserId?: number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUnitDto
     */
    id?: number;
}

/**
 * 归属于组织单元的人员信息
 * @export
 * @interface OrganizationUnitUserDto
 */
export interface OrganizationUnitUserDto {
    /**
     * 用户ID
     * @type {number}
     * @memberof OrganizationUnitUserDto
     */
    id?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof OrganizationUnitUserDto
     */
    userName?: string;
    /**
     * 用户姓名
     * @type {string}
     * @memberof OrganizationUnitUserDto
     */
    name?: string;
    /**
     * 用户手机号
     * @type {string}
     * @memberof OrganizationUnitUserDto
     */
    phoneNumber?: string;
    /**
     * 用户创建时间
     * @type {string}
     * @memberof OrganizationUnitUserDto
     */
    creationTime?: string;
    /**
     * 邮箱
     * @type {string}
     * @memberof OrganizationUnitUserDto
     */
    emailAddress?: string;
}

/**
 * 用户信息
 * @export
 * @interface OrganizationUnitUserListDto
 */
export interface OrganizationUnitUserListDto {
    /**
     * 用户名称
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    name?: string;
    /**
     * 显示名称
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    surname?: string;
    /**
     * 用户账号
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    userName?: string;
    /**
     * 邮件地址
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    emailAddress?: string;
    /**
     * 头像ID
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    profilePictureId?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    addedTime?: string;
    /**
     * 用户手机号
     * @type {string}
     * @memberof OrganizationUnitUserListDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUnitUserListDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface OssETagFileDto
 */
export interface OssETagFileDto {
    /**
     * 
     * @type {string}
     * @memberof OssETagFileDto
     */
    bucketName?: string;
    /**
     * 
     * @type {string}
     * @memberof OssETagFileDto
     */
    eTag?: string;
    /**
     * 
     * @type {string}
     * @memberof OssETagFileDto
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface PagedResultDtoAppEditionDto
 */
export interface PagedResultDtoAppEditionDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoAppEditionDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<AppEditionDto>}
     * @memberof PagedResultDtoAppEditionDto
     */
    items?: Array<AppEditionDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoAuditLogListDto
 */
export interface PagedResultDtoAuditLogListDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoAuditLogListDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<AuditLogListDto>}
     * @memberof PagedResultDtoAuditLogListDto
     */
    items?: Array<AuditLogListDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoFirendshipUserDto
 */
export interface PagedResultDtoFirendshipUserDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoFirendshipUserDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<FirendshipUserDto>}
     * @memberof PagedResultDtoFirendshipUserDto
     */
    items?: Array<FirendshipUserDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoGetFileSettingDemoDto
 */
export interface PagedResultDtoGetFileSettingDemoDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoGetFileSettingDemoDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<GetFileSettingDemoDto>}
     * @memberof PagedResultDtoGetFileSettingDemoDto
     */
    items?: Array<GetFileSettingDemoDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoGetListAppStartPageDto
 */
export interface PagedResultDtoGetListAppStartPageDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoGetListAppStartPageDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<GetListAppStartPageDto>}
     * @memberof PagedResultDtoGetListAppStartPageDto
     */
    items?: Array<GetListAppStartPageDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoGetListDemoDto
 */
export interface PagedResultDtoGetListDemoDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoGetListDemoDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<GetListDemoDto>}
     * @memberof PagedResultDtoGetListDemoDto
     */
    items?: Array<GetListDemoDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoGetListSysFunDto
 */
export interface PagedResultDtoGetListSysFunDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoGetListSysFunDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<GetListSysFunDto>}
     * @memberof PagedResultDtoGetListSysFunDto
     */
    items?: Array<GetListSysFunDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoOSSObjectDto
 */
export interface PagedResultDtoOSSObjectDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoOSSObjectDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<OSSObjectDto>}
     * @memberof PagedResultDtoOSSObjectDto
     */
    items?: Array<OSSObjectDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoOrganizationUnitUserDto
 */
export interface PagedResultDtoOrganizationUnitUserDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoOrganizationUnitUserDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<OrganizationUnitUserDto>}
     * @memberof PagedResultDtoOrganizationUnitUserDto
     */
    items?: Array<OrganizationUnitUserDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoOrganizationUnitUserListDto
 */
export interface PagedResultDtoOrganizationUnitUserListDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoOrganizationUnitUserListDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<OrganizationUnitUserListDto>}
     * @memberof PagedResultDtoOrganizationUnitUserListDto
     */
    items?: Array<OrganizationUnitUserListDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoRoleDto
 */
export interface PagedResultDtoRoleDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoRoleDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<RoleDto>}
     * @memberof PagedResultDtoRoleDto
     */
    items?: Array<RoleDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoTenantDto
 */
export interface PagedResultDtoTenantDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoTenantDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<TenantDto>}
     * @memberof PagedResultDtoTenantDto
     */
    items?: Array<TenantDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoUserDto
 */
export interface PagedResultDtoUserDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoUserDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof PagedResultDtoUserDto
     */
    items?: Array<UserDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoUserListDto
 */
export interface PagedResultDtoUserListDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoUserListDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<UserListDto>}
     * @memberof PagedResultDtoUserListDto
     */
    items?: Array<UserListDto>;
}

/**
 * 
 * @export
 * @interface PagedResultDtoUserLoginAttemptDto
 */
export interface PagedResultDtoUserLoginAttemptDto {
    /**
     * 
     * @type {number}
     * @memberof PagedResultDtoUserLoginAttemptDto
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<UserLoginAttemptDto>}
     * @memberof PagedResultDtoUserLoginAttemptDto
     */
    items?: Array<UserLoginAttemptDto>;
}

/**
 * 
 * @export
 * @interface Part
 */
export interface Part {
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    partNumber?: number;
    /**
     * 
     * @type {Date}
     * @memberof Part
     */
    lastModified?: Date;
    /**
     * 
     * @type {string}
     * @memberof Part
     */
    eTag?: string;
    /**
     * 
     * @type {number}
     * @memberof Part
     */
    size?: number;
    /**
     * 
     * @type {PartETag}
     * @memberof Part
     */
    partETag?: PartETag;
}

/**
 * 
 * @export
 * @interface PartETag
 */
export interface PartETag {
    /**
     * 
     * @type {number}
     * @memberof PartETag
     */
    partNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof PartETag
     */
    eTag?: string;
    /**
     * 
     * @type {string}
     * @memberof PartETag
     */
    crc64?: string;
    /**
     * 
     * @type {number}
     * @memberof PartETag
     */
    length?: number;
}

/**
 * 
 * @export
 * @interface PartListing
 */
export interface PartListing {
    /**
     * 
     * @type {string}
     * @memberof PartListing
     */
    bucketName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartListing
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof PartListing
     */
    uploadId?: string;
    /**
     * 
     * @type {number}
     * @memberof PartListing
     */
    partNumberMarker?: number;
    /**
     * 
     * @type {number}
     * @memberof PartListing
     */
    nextPartNumberMarker?: number;
    /**
     * 
     * @type {number}
     * @memberof PartListing
     */
    maxParts?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PartListing
     */
    isTruncated?: boolean;
    /**
     * 
     * @type {Array<Part>}
     * @memberof PartListing
     */
    parts?: Array<Part>;
    /**
     * 
     * @type {number}
     * @memberof PartListing
     */
    httpStatusCode?: PartListing.HttpStatusCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof PartListing
     */
    requestId?: string;
    /**
     * 
     * @type {number}
     * @memberof PartListing
     */
    contentLength?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PartListing
     */
    responseMetadata?: { [key: string]: string; };
}

/**
 * @export
 * @namespace PartListing
 */
export namespace PartListing {
    /**
     * @export
     * @enum {string}
     */
    export enum HttpStatusCodeEnum {
        NUMBER_100 = <any> 100,
        NUMBER_101 = <any> 101,
        NUMBER_102 = <any> 102,
        NUMBER_103 = <any> 103,
        NUMBER_200 = <any> 200,
        NUMBER_201 = <any> 201,
        NUMBER_202 = <any> 202,
        NUMBER_203 = <any> 203,
        NUMBER_204 = <any> 204,
        NUMBER_205 = <any> 205,
        NUMBER_206 = <any> 206,
        NUMBER_207 = <any> 207,
        NUMBER_208 = <any> 208,
        NUMBER_226 = <any> 226,
        NUMBER_300 = <any> 300,
        NUMBER_301 = <any> 301,
        NUMBER_302 = <any> 302,
        NUMBER_303 = <any> 303,
        NUMBER_304 = <any> 304,
        NUMBER_305 = <any> 305,
        NUMBER_306 = <any> 306,
        NUMBER_307 = <any> 307,
        NUMBER_308 = <any> 308,
        NUMBER_400 = <any> 400,
        NUMBER_401 = <any> 401,
        NUMBER_402 = <any> 402,
        NUMBER_403 = <any> 403,
        NUMBER_404 = <any> 404,
        NUMBER_405 = <any> 405,
        NUMBER_406 = <any> 406,
        NUMBER_407 = <any> 407,
        NUMBER_408 = <any> 408,
        NUMBER_409 = <any> 409,
        NUMBER_410 = <any> 410,
        NUMBER_411 = <any> 411,
        NUMBER_412 = <any> 412,
        NUMBER_413 = <any> 413,
        NUMBER_414 = <any> 414,
        NUMBER_415 = <any> 415,
        NUMBER_416 = <any> 416,
        NUMBER_417 = <any> 417,
        NUMBER_421 = <any> 421,
        NUMBER_422 = <any> 422,
        NUMBER_423 = <any> 423,
        NUMBER_424 = <any> 424,
        NUMBER_426 = <any> 426,
        NUMBER_428 = <any> 428,
        NUMBER_429 = <any> 429,
        NUMBER_431 = <any> 431,
        NUMBER_451 = <any> 451,
        NUMBER_500 = <any> 500,
        NUMBER_501 = <any> 501,
        NUMBER_502 = <any> 502,
        NUMBER_503 = <any> 503,
        NUMBER_504 = <any> 504,
        NUMBER_505 = <any> 505,
        NUMBER_506 = <any> 506,
        NUMBER_507 = <any> 507,
        NUMBER_508 = <any> 508,
        NUMBER_510 = <any> 510,
        NUMBER_511 = <any> 511
    }
}

/**
 * 
 * @export
 * @interface PasswordComplexitySetting
 */
export interface PasswordComplexitySetting {
    /**
     * 
     * @type {number}
     * @memberof PasswordComplexitySetting
     */
    minLength?: number;
    /**
     * 
     * @type {number}
     * @memberof PasswordComplexitySetting
     */
    maxLength?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordComplexitySetting
     */
    useNumbers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordComplexitySetting
     */
    useUpperCaseLetters?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordComplexitySetting
     */
    useLowerCaseLetters?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PasswordComplexitySetting
     */
    usePunctuations?: boolean;
}

/**
 * 
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    id?: number;
}

/**
 * 权值
 * @export
 * @interface PermissionViewDto
 */
export interface PermissionViewDto {
    /**
     * 上级名称
     * @type {string}
     * @memberof PermissionViewDto
     */
    parentName?: string;
    /**
     * 名称
     * @type {string}
     * @memberof PermissionViewDto
     */
    name?: string;
    /**
     * 显示名称
     * @type {string}
     * @memberof PermissionViewDto
     */
    displayName?: string;
    /**
     * 描述
     * @type {string}
     * @memberof PermissionViewDto
     */
    description?: string;
    /**
     * 默认授予权限
     * @type {boolean}
     * @memberof PermissionViewDto
     */
    isGrantedByDefault?: boolean;
    /**
     * 子权限
     * @type {Array<PermissionViewDto>}
     * @memberof PermissionViewDto
     */
    children?: Array<PermissionViewDto>;
}

/**
 * 发送短信前需验证验证码
 * @export
 * @interface PhoneWithCaptchaInput
 */
export interface PhoneWithCaptchaInput {
    /**
     * 电话号码
     * @type {string}
     * @memberof PhoneWithCaptchaInput
     */
    phoneNumber: string;
    /**
     * 验证码
     * @type {string}
     * @memberof PhoneWithCaptchaInput
     */
    captcha?: string;
}

/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    description?: string;
    /**
     * 
     * @type {Array<Policy>}
     * @memberof Policy
     */
    children?: Array<Policy>;
}

/**
 * 
 * @export
 * @interface PreviousAndNextDemo
 */
export interface PreviousAndNextDemo {
    /**
     * 
     * @type {number}
     * @memberof PreviousAndNextDemo
     */
    previousId?: number;
    /**
     * 
     * @type {string}
     * @memberof PreviousAndNextDemo
     */
    previousName?: string;
    /**
     * 
     * @type {number}
     * @memberof PreviousAndNextDemo
     */
    nextId?: number;
    /**
     * 
     * @type {string}
     * @memberof PreviousAndNextDemo
     */
    nextName?: string;
}

/**
 * 邮箱注册
 * @export
 * @interface RegisterByEmailInput
 */
export interface RegisterByEmailInput {
    /**
     * 用户账号
     * @type {string}
     * @memberof RegisterByEmailInput
     */
    userName: string;
    /**
     * 邮箱地址
     * @type {string}
     * @memberof RegisterByEmailInput
     */
    emailAddress: string;
    /**
     * 密码
     * @type {string}
     * @memberof RegisterByEmailInput
     */
    password: string;
    /**
     * 第三方登录令牌
     * @type {string}
     * @memberof RegisterByEmailInput
     */
    token?: string;
    /**
     * 邮件验证码
     * @type {string}
     * @memberof RegisterByEmailInput
     */
    captcha?: string;
}

/**
 * 手机号注册
 * @export
 * @interface RegisterByPhoneNumberInput
 */
export interface RegisterByPhoneNumberInput {
    /**
     * 用户账号
     * @type {string}
     * @memberof RegisterByPhoneNumberInput
     */
    userName: string;
    /**
     * 邮箱地址
     * @type {string}
     * @memberof RegisterByPhoneNumberInput
     */
    phoneNumber: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof RegisterByPhoneNumberInput
     */
    captcha?: string;
    /**
     * 密码
     * @type {string}
     * @memberof RegisterByPhoneNumberInput
     */
    password: string;
    /**
     * 第三方登录令牌
     * @type {string}
     * @memberof RegisterByPhoneNumberInput
     */
    token?: string;
}

/**
 * 
 * @export
 * @interface RegisterInput
 */
export interface RegisterInput {
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    surname: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    emailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    captchaResponse?: string;
    /**
     * 第三方登录令牌
     * @type {string}
     * @memberof RegisterInput
     */
    token?: string;
}

/**
 * 手机号注册(只有手机号)
 * @export
 * @interface RegisterOnlyPhoneNumberInput
 */
export interface RegisterOnlyPhoneNumberInput {
    /**
     * 手机号
     * @type {string}
     * @memberof RegisterOnlyPhoneNumberInput
     */
    phoneNumber: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof RegisterOnlyPhoneNumberInput
     */
    captcha?: string;
    /**
     * 密码
     * @type {string}
     * @memberof RegisterOnlyPhoneNumberInput
     */
    password: string;
}

/**
 * 
 * @export
 * @interface RegisterOutput
 */
export interface RegisterOutput {
    /**
     * 
     * @type {boolean}
     * @memberof RegisterOutput
     */
    canLogin?: boolean;
}

/**
 * 通过邮箱找回
 * @export
 * @interface ResetPasswordByEmailInput
 */
export interface ResetPasswordByEmailInput {
    /**
     * 新密码
     * @type {string}
     * @memberof ResetPasswordByEmailInput
     */
    password: string;
    /**
     * 邮箱号
     * @type {string}
     * @memberof ResetPasswordByEmailInput
     */
    email: string;
    /**
     * 验证码
     * @type {string}
     * @memberof ResetPasswordByEmailInput
     */
    verificationCode: string;
}

/**
 * 通过手机号找回密码
 * @export
 * @interface ResetPasswordByPhoneNumberInput
 */
export interface ResetPasswordByPhoneNumberInput {
    /**
     * 新密码
     * @type {string}
     * @memberof ResetPasswordByPhoneNumberInput
     */
    password?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof ResetPasswordByPhoneNumberInput
     */
    phoneNumber?: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof ResetPasswordByPhoneNumberInput
     */
    code?: string;
}

/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    adminPassword: string;
    /**
     * 
     * @type {number}
     * @memberof ResetPasswordDto
     */
    userId: number;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    displayName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleDto
     */
    permissions?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface RoleEditDto
 */
export interface RoleEditDto {
    /**
     * 
     * @type {string}
     * @memberof RoleEditDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RoleEditDto
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof RoleEditDto
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleEditDto
     */
    isStatic?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RoleEditDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface RoleListDto
 */
export interface RoleListDto {
    /**
     * 
     * @type {string}
     * @memberof RoleListDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleListDto
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleListDto
     */
    isStatic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoleListDto
     */
    isDefault?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof RoleListDto
     */
    creationTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof RoleListDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface Secret
 */
export interface Secret {
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    value?: string;
    /**
     * 
     * @type {Date}
     * @memberof Secret
     */
    expiration?: Date;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface SecuritySettingDto
 */
export interface SecuritySettingDto {
    /**
     * 
     * @type {PasswordComplexitySetting}
     * @memberof SecuritySettingDto
     */
    passwordComplexity?: PasswordComplexitySetting;
    /**
     * 
     * @type {boolean}
     * @memberof SecuritySettingDto
     */
    useDefaultPasswordComplexity?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SecuritySettingDto
     */
    maxFailedAccessAttemptsBeforeLockout?: number;
    /**
     * 
     * @type {number}
     * @memberof SecuritySettingDto
     */
    defaultAccountLockoutSeconds?: number;
}

/**
 * 发送激活账号邮件
 * @export
 * @interface SendConfirmEmailByCaptchaInput
 */
export interface SendConfirmEmailByCaptchaInput {
    /**
     * 验证码
     * @type {string}
     * @memberof SendConfirmEmailByCaptchaInput
     */
    captcha?: string;
    /**
     * 邮箱地址
     * @type {string}
     * @memberof SendConfirmEmailByCaptchaInput
     */
    email: string;
}

/**
 * 
 * @export
 * @interface SetFileSettingDemoDto
 */
export interface SetFileSettingDemoDto {
    /**
     * 文件大小限制
     * @type {number}
     * @memberof SetFileSettingDemoDto
     */
    fileSize?: number;
    /**
     * 文件格式限制
     * @type {string}
     * @memberof SetFileSettingDemoDto
     */
    fileExtension?: string;
}

/**
 * 
 * @export
 * @interface SettingProperty
 */
export interface SettingProperty {
    /**
     * 
     * @type {string}
     * @memberof SettingProperty
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingProperty
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingProperty
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingProperty
     */
    type?: string;
    /**
     * 
     * @type {any}
     * @memberof SettingProperty
     */
    value?: any;
    /**
     * 
     * @type {string}
     * @memberof SettingProperty
     */
    title?: string;
    /**
     * 
     * @type {Array<NameValueDto>}
     * @memberof SettingProperty
     */
    selectOptions?: Array<NameValueDto>;
}

/**
 * 
 * @export
 * @interface SettingsEditOutput
 */
export interface SettingsEditOutput {
    /**
     * 
     * @type {Array<SettingProperty>}
     * @memberof SettingsEditOutput
     */
    setting?: Array<SettingProperty>;
    /**
     * 
     * @type {string}
     * @memberof SettingsEditOutput
     */
    tabName?: string;
    /**
     * 用于反射获取dto
     * @type {string}
     * @memberof SettingsEditOutput
     */
    name?: string;
}

/**
 * 站点地址
 * @export
 * @interface SiteUrlInput
 */
export interface SiteUrlInput {
    /**
     * 站点地址
     * @type {string}
     * @memberof SiteUrlInput
     */
    siteUrl: string;
}

/**
 * 
 * @export
 * @interface SkinOutput
 */
export interface SkinOutput {
    /**
     * 
     * @type {string}
     * @memberof SkinOutput
     */
    name: string;
}

/**
 * 
 * @export
 * @interface TenantDto
 */
export interface TenantDto {
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    tenancyName: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof TenantDto
     */
    isActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TenantDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface TenantLoginInfoDto
 */
export interface TenantLoginInfoDto {
    /**
     * 
     * @type {string}
     * @memberof TenantLoginInfoDto
     */
    tenancyName?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantLoginInfoDto
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TenantLoginInfoDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface TenantNotification
 */
export interface TenantNotification {
    /**
     * 
     * @type {number}
     * @memberof TenantNotification
     */
    tenantId?: number;
    /**
     * 
     * @type {string}
     * @memberof TenantNotification
     */
    notificationName?: string;
    /**
     * 
     * @type {NotificationData}
     * @memberof TenantNotification
     */
    data?: NotificationData;
    /**
     * 
     * @type {string}
     * @memberof TenantNotification
     */
    entityType?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantNotification
     */
    entityTypeName?: string;
    /**
     * 
     * @type {any}
     * @memberof TenantNotification
     */
    entityId?: any;
    /**
     * 
     * @type {number}
     * @memberof TenantNotification
     */
    severity?: TenantNotification.SeverityEnum;
    /**
     * 
     * @type {Date}
     * @memberof TenantNotification
     */
    creationTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof TenantNotification
     */
    id?: string;
}

/**
 * @export
 * @namespace TenantNotification
 */
export namespace TenantNotification {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3,
        NUMBER_4 = <any> 4
    }
}

/**
 * 
 * @export
 * @interface UnblockUserInput
 */
export interface UnblockUserInput {
    /**
     * 
     * @type {number}
     * @memberof UnblockUserInput
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof UnblockUserInput
     */
    tenantId?: number;
}

/**
 * 
 * @export
 * @interface UpdateAndroidAppEditionInput
 */
export interface UpdateAndroidAppEditionInput {
    /**
     * 
     * @type {number}
     * @memberof UpdateAndroidAppEditionInput
     */
    id?: number;
    /**
     * 版本号
     * @type {string}
     * @memberof UpdateAndroidAppEditionInput
     */
    version?: string;
    /**
     * 关于
     * @type {string}
     * @memberof UpdateAndroidAppEditionInput
     */
    aboutUrl?: string;
    /**
     * 安装包
     * @type {string}
     * @memberof UpdateAndroidAppEditionInput
     */
    installationPackage?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof UpdateAndroidAppEditionInput
     */
    isMandatoryUpdate?: boolean;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof UpdateAndroidAppEditionInput
     */
    isActive?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof UpdateAndroidAppEditionInput
     */
    describe?: string;
}

/**
 * 
 * @export
 * @interface UpdateAppStartPageDto
 */
export interface UpdateAppStartPageDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateAppStartPageDto
     */
    id?: number;
    /**
     * 平台 Android = 1, IOS = 2   （创建默认值时，该项可空）
     * @type {number}
     * @memberof UpdateAppStartPageDto
     */
    platform?: UpdateAppStartPageDto.PlatformEnum;
    /**
     * 分辨率 宽  （创建默认值时，该项可空）
     * @type {number}
     * @memberof UpdateAppStartPageDto
     */
    widthPx?: number;
    /**
     * 分辨率 高  （创建默认值时，该项可空）
     * @type {number}
     * @memberof UpdateAppStartPageDto
     */
    highPx?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof UpdateAppStartPageDto
     */
    url?: string;
}

/**
 * @export
 * @namespace UpdateAppStartPageDto
 */
export namespace UpdateAppStartPageDto {
    /**
     * @export
     * @enum {string}
     */
    export enum PlatformEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface UpdateClientDto
 */
export interface UpdateClientDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateClientDto
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClientDto
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClientDto
     */
    logoUri?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateClientDto
     */
    allowedScopes?: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateCurrentUserInput
 */
export interface UpdateCurrentUserInput {
    /**
     * ����
     * @type {string}
     * @memberof UpdateCurrentUserInput
     */
    name: string;
    /**
     * ����    ���ɲ�ʹ�á�
     * @type {string}
     * @memberof UpdateCurrentUserInput
     */
    surname?: string;
    /**
     * ����
     * @type {string}
     * @memberof UpdateCurrentUserInput
     */
    emailAddress: string;
    /**
     * �ֻ���
     * @type {string}
     * @memberof UpdateCurrentUserInput
     */
    phoneNumber?: string;
}

/**
 * 
 * @export
 * @interface UpdateDemoDto
 */
export interface UpdateDemoDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateDemoDto
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof UpdateDemoDto
     */
    name?: string;
    /**
     * 介绍
     * @type {string}
     * @memberof UpdateDemoDto
     */
    longText?: string;
    /**
     * 组
     * @type {string}
     * @memberof UpdateDemoDto
     */
    group?: string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof UpdateDemoDto
     */
    isActivate?: boolean;
    /**
     * 顺序
     * @type {number}
     * @memberof UpdateDemoDto
     */
    sort?: number;
    /**
     * 权
     * @type {number}
     * @memberof UpdateDemoDto
     */
    weight?: number;
    /**
     * 发布时间
     * @type {Date}
     * @memberof UpdateDemoDto
     */
    publishTime?: Date;
    /**
     * 头像
     * @type {string}
     * @memberof UpdateDemoDto
     */
    avatar?: string;
    /**
     * 位置
     * @type {Location}
     * @memberof UpdateDemoDto
     */
    location?: Location;
}

/**
 * 
 * @export
 * @interface UpdateIOSAppEditionInput
 */
export interface UpdateIOSAppEditionInput {
    /**
     * 
     * @type {number}
     * @memberof UpdateIOSAppEditionInput
     */
    id?: number;
    /**
     * Itunes连接
     * @type {string}
     * @memberof UpdateIOSAppEditionInput
     */
    itunesUrl?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof UpdateIOSAppEditionInput
     */
    version?: string;
    /**
     * 关于
     * @type {string}
     * @memberof UpdateIOSAppEditionInput
     */
    aboutUrl?: string;
    /**
     * 安装包
     * @type {string}
     * @memberof UpdateIOSAppEditionInput
     */
    installationPackage?: string;
    /**
     * 是否强制更新
     * @type {boolean}
     * @memberof UpdateIOSAppEditionInput
     */
    isMandatoryUpdate?: boolean;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof UpdateIOSAppEditionInput
     */
    isActive?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof UpdateIOSAppEditionInput
     */
    describe?: string;
}

/**
 * 更新菜单信息
 * @export
 * @interface UpdateMenuInput
 */
export interface UpdateMenuInput {
    /**
     * 菜单Id
     * @type {number}
     * @memberof UpdateMenuInput
     */
    id?: number;
    /**
     * 显示名称
     * @type {string}
     * @memberof UpdateMenuInput
     */
    displayName?: string;
    /**
     * 图标class
     * @type {string}
     * @memberof UpdateMenuInput
     */
    icon?: string;
    /**
     * 菜单是否可见
     * @type {boolean}
     * @memberof UpdateMenuInput
     */
    isVisible?: boolean;
    /**
     * 权限限制
     * @type {string}
     * @memberof UpdateMenuInput
     */
    requiredPermissionName?: string;
    /**
     * 目标链接
     * @type {string}
     * @memberof UpdateMenuInput
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface UpdateNotificationSettingsInput
 */
export interface UpdateNotificationSettingsInput {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateNotificationSettingsInput
     */
    receiveNotifications?: boolean;
    /**
     * 
     * @type {Array<NotificationSubscriptionDto>}
     * @memberof UpdateNotificationSettingsInput
     */
    notifications?: Array<NotificationSubscriptionDto>;
}

/**
 * 更新组织机构信息请求
 * @export
 * @interface UpdateOrganizationUnitInput
 */
export interface UpdateOrganizationUnitInput {
    /**
     * 组织机构ID
     * @type {number}
     * @memberof UpdateOrganizationUnitInput
     */
    id?: number;
    /**
     * 组织机构名称
     * @type {string}
     * @memberof UpdateOrganizationUnitInput
     */
    displayName: string;
}

/**
 * 
 * @export
 * @interface UpdateProfilePictureInput
 */
export interface UpdateProfilePictureInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfilePictureInput
     */
    fileName: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProfilePictureInput
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProfilePictureInput
     */
    y?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProfilePictureInput
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProfilePictureInput
     */
    height?: number;
}

/**
 * 
 * @export
 * @interface UpdateSecretInput
 */
export interface UpdateSecretInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateSecretInput
     */
    clientId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateSecretInput
     */
    secrets?: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateSysFunDto
 */
export interface UpdateSysFunDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateSysFunDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateSysFunDto
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateSysFunDto
     */
    tagNames?: Array<string>;
}

/**
 * 
 * @export
 * @interface UpdateTagInput
 */
export interface UpdateTagInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateTagInput
     */
    tagNames?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UpdateTagInput
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    isActive?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserDto
     */
    roleNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    password?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof UpdateUserDto
     */
    phoneNumber?: string;
    /**
     * 是否发送激活消息
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    sendActivationMessage?: boolean;
    /**
     * 是否发送激活邮件
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    sendActivationEmail?: boolean;
    /**
     * 是否设置随机密码
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    setRandomPassword?: boolean;
    /**
     * 组织机构
     * @type {Array<number>}
     * @memberof UpdateUserDto
     */
    organizations?: Array<number>;
    /**
     * 下次登录需要修改密码
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    shouldChangePasswordOnNextLogin?: boolean;
    /**
     * 角色类型  (不可移除初始角色)(创建时只能选一个)
     * @type {Array<number>}
     * @memberof UpdateUserDto
     */
    roleTypeList?: Array<UpdateUserDto.RoleTypeListEnum>;
    /**
     * [学生、教师] 昵称 可空 （6字以内，允许与其他昵称重复）
     * @type {string}
     * @memberof UpdateUserDto
     */
    nickname?: string;
}

/**
 * @export
 * @namespace UpdateUserDto
 */
export namespace UpdateUserDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
}

/**
 * 修改用户权限参数
 * @export
 * @interface UpdateUserPermissionsInput
 */
export interface UpdateUserPermissionsInput {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserPermissionsInput
     */
    id?: number;
    /**
     * 权限集合
     * @type {Array<string>}
     * @memberof UpdateUserPermissionsInput
     */
    grantedPermissionNames: Array<string>;
}

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    surname: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    emailAddress: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    isActive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    fullName?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserDto
     */
    lastLoginTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserDto
     */
    creationTime?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    roleNames?: Array<string>;
    /**
     * ��֯������Ϣ
     * @type {Array<number>}
     * @memberof UserDto
     */
    organizations?: Array<number>;
    /**
     * 角色类型  (集合形式)
     * @type {Array<number>}
     * @memberof UserDto
     */
    roleTypeList?: Array<UserDto.RoleTypeListEnum>;
    /**
     * 初始角色类型（不可删除）
     * @type {number}
     * @memberof UserDto
     */
    initRoleType?: UserDto.InitRoleTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    id?: number;
}

/**
 * @export
 * @namespace UserDto
 */
export namespace UserDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum InitRoleTypeEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_4 = <any> 4,
        NUMBER_8 = <any> 8
    }
}

/**
 * 编辑用户
 * @export
 * @interface UserEditDto
 */
export interface UserEditDto {
    /**
     * Set null to create a new user. Set user's Id to update a user
     * @type {number}
     * @memberof UserEditDto
     */
    id?: number;
    /**
     * 姓名
     * @type {string}
     * @memberof UserEditDto
     */
    name: string;
    /**
     * 姓氏    【可不使用】
     * @type {string}
     * @memberof UserEditDto
     */
    surname?: string;
    /**
     * 登录名
     * @type {string}
     * @memberof UserEditDto
     */
    userName: string;
    /**
     * 邮箱
     * @type {string}
     * @memberof UserEditDto
     */
    emailAddress?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof UserEditDto
     */
    phoneNumber?: string;
    /**
     * 密码
     * @type {string}
     * @memberof UserEditDto
     */
    password?: string;
    /**
     * 是否激活
     * @type {boolean}
     * @memberof UserEditDto
     */
    isActive?: boolean;
    /**
     * 下次登录需要修改密码
     * @type {boolean}
     * @memberof UserEditDto
     */
    shouldChangePasswordOnNextLogin?: boolean;
    /**
     * 是否启用锁定
     * @type {boolean}
     * @memberof UserEditDto
     */
    isLockoutEnabled?: boolean;
    /**
     * 角色类型  (集合形式)
     * @type {Array<number>}
     * @memberof UserEditDto
     */
    roleTypeList?: Array<UserEditDto.RoleTypeListEnum>;
    /**
     * [学生、教师] 昵称 可空 （6字以内，允许与其他昵称重复）
     * @type {string}
     * @memberof UserEditDto
     */
    nickname?: string;
}

/**
 * @export
 * @namespace UserEditDto
 */
export namespace UserEditDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
}

/**
 * 用户信息
 * @export
 * @interface UserListDto
 */
export interface UserListDto {
    /**
     * 
     * @type {number}
     * @memberof UserListDto
     */
    id?: number;
    /**
     * 用户姓名
     * @type {string}
     * @memberof UserListDto
     */
    name?: string;
    /**
     * 昵称
     * @type {string}
     * @memberof UserListDto
     */
    surname?: string;
    /**
     * 用户名
     * @type {string}
     * @memberof UserListDto
     */
    userName?: string;
    /**
     * 邮件地址
     * @type {string}
     * @memberof UserListDto
     */
    emailAddress?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof UserListDto
     */
    phoneNumber?: string;
    /**
     * 头像
     * @type {string}
     * @memberof UserListDto
     */
    profilePictureId?: string;
    /**
     * 邮箱地址是否已验证
     * @type {boolean}
     * @memberof UserListDto
     */
    isEmailConfirmed?: boolean;
    /**
     * 手机号码是否已验证
     * @type {boolean}
     * @memberof UserListDto
     */
    isPhoneNumberConfirmed?: boolean;
    /**
     * 角色列表
     * @type {Array<UserListRoleDto>}
     * @memberof UserListDto
     */
    roles?: Array<UserListRoleDto>;
    /**
     * 上次登录时间
     * @type {string}
     * @memberof UserListDto
     */
    lastLoginTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserListDto
     */
    isActive?: boolean;
    /**
     * 创建时间
     * @type {string}
     * @memberof UserListDto
     */
    creationTime?: string;
    /**
     * 是否被锁定
     * @type {boolean}
     * @memberof UserListDto
     */
    isLocked?: boolean;
    /**
     * 锁定超时时间
     * @type {Date}
     * @memberof UserListDto
     */
    lockoutEndDateUtc?: Date;
    /**
     * 角色类型  (集合形式)
     * @type {Array<number>}
     * @memberof UserListDto
     */
    roleTypeList?: Array<UserListDto.RoleTypeListEnum>;
    /**
     * 初始角色类型（不可删除）
     * @type {number}
     * @memberof UserListDto
     */
    initRoleType?: UserListDto.InitRoleTypeEnum;
    /**
     * [学生、教师] 昵称 可空 （6字以内，允许与其他昵称重复）
     * @type {string}
     * @memberof UserListDto
     */
    nickname?: string;
    /**
     * 家长的学生
     * @type {Array<number>}
     * @memberof UserListDto
     */
    studentIds?: Array<number>;
}

/**
 * @export
 * @namespace UserListDto
 */
export namespace UserListDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum InitRoleTypeEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_4 = <any> 4,
        NUMBER_8 = <any> 8
    }
}

/**
 * 角色信息
 * @export
 * @interface UserListRoleDto
 */
export interface UserListRoleDto {
    /**
     * 
     * @type {number}
     * @memberof UserListRoleDto
     */
    roleId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserListRoleDto
     */
    roleName?: string;
}

/**
 * 
 * @export
 * @interface UserLoginAttemptDto
 */
export interface UserLoginAttemptDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    tenancyName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    userNameOrEmailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    clientIpAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    browserInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    result?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginAttemptDto
     */
    creationTime?: string;
}

/**
 * 
 * @export
 * @interface UserLoginInfoDto
 */
export interface UserLoginInfoDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    surname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfoDto
     */
    profile?: string;
    /**
     * 
     * @type {number}
     * @memberof UserLoginInfoDto
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface UserMenuItem
 */
export interface UserMenuItem {
    /**
     * 
     * @type {string}
     * @memberof UserMenuItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMenuItem
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMenuItem
     */
    displayName?: string;
    /**
     * 
     * @type {number}
     * @memberof UserMenuItem
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof UserMenuItem
     */
    url?: string;
    /**
     * 
     * @type {any}
     * @memberof UserMenuItem
     */
    customData?: any;
    /**
     * 
     * @type {string}
     * @memberof UserMenuItem
     */
    target?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserMenuItem
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserMenuItem
     */
    isVisible?: boolean;
    /**
     * 
     * @type {Array<UserMenuItem>}
     * @memberof UserMenuItem
     */
    items?: Array<UserMenuItem>;
}

/**
 * 
 * @export
 * @interface UserMiniDto
 */
export interface UserMiniDto {
    /**
     * 
     * @type {string}
     * @memberof UserMiniDto
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserMiniDto
     */
    name?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UserMiniDto
     */
    roleTypeList?: Array<UserMiniDto.RoleTypeListEnum>;
    /**
     * [学生、教师] 昵称 可空 （6字以内，允许与其他昵称重复）
     * @type {string}
     * @memberof UserMiniDto
     */
    nickname?: string;
    /**
     * 知识碎片
     * @type {number}
     * @memberof UserMiniDto
     */
    knowledgePieces?: number;
    /**
     * 学生主等级  任意技能等级升级，则主等级升级  主等级不能通过获得经验直接升级
     * @type {number}
     * @memberof UserMiniDto
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof UserMiniDto
     */
    id?: number;
}

/**
 * @export
 * @namespace UserMiniDto
 */
export namespace UserMiniDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleTypeListEnum {
        _1 = <any> '1',
        _2 = <any> '2',
        _4 = <any> '4',
        _8 = <any> '8'
    }
}

/**
 * 
 * @export
 * @interface UserNotification
 */
export interface UserNotification {
    /**
     * 
     * @type {number}
     * @memberof UserNotification
     */
    tenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof UserNotification
     */
    userId?: number;
    /**
     * 
     * @type {number}
     * @memberof UserNotification
     */
    state?: UserNotification.StateEnum;
    /**
     * 
     * @type {TenantNotification}
     * @memberof UserNotification
     */
    notification?: TenantNotification;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    id?: string;
}

/**
 * @export
 * @namespace UserNotification
 */
export namespace UserNotification {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}

/**
 * 
 * @export
 * @interface UserRoleDto
 */
export interface UserRoleDto {
    /**
     * 
     * @type {number}
     * @memberof UserRoleDto
     */
    roleId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRoleDto
     */
    roleName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleDto
     */
    roleDisplayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRoleDto
     */
    isAssigned?: boolean;
}

/**
 * �û�������֯����
 * @export
 * @interface UserToOrganizationUnitInput
 */
export interface UserToOrganizationUnitInput {
    /**
     * �û�ID
     * @type {number}
     * @memberof UserToOrganizationUnitInput
     */
    userId?: number;
    /**
     * ��֯����ID
     * @type {number}
     * @memberof UserToOrganizationUnitInput
     */
    organizationUnitId?: number;
}

/**
 * �û�������֯����
 * @export
 * @interface UsersToOrganizationUnitInput
 */
export interface UsersToOrganizationUnitInput {
    /**
     * �û�ID
     * @type {string}
     * @memberof UsersToOrganizationUnitInput
     */
    userIdListStr?: string;
    /**
     * ��֯����ID
     * @type {number}
     * @memberof UsersToOrganizationUnitInput
     */
    organizationUnitId?: number;
}

/**
 * 
 * @export
 * @interface VerificationCodeInput
 */
export interface VerificationCodeInput {
    /**
     * 
     * @type {string}
     * @memberof VerificationCodeInput
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof VerificationCodeInput
     */
    phoneNumber: string;
}

/**
 * 
 * @export
 * @interface VersionInput
 */
export interface VersionInput {
    /**
     * 
     * @type {string}
     * @memberof VersionInput
     */
    version?: string;
}


/**
 * AccountApi - fetch parameter creator
 * @export
 */
export const AccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BindingThirdPartyInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindingThirdParty(input?: BindingThirdPartyInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Account/BindingThirdParty`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BindingThirdPartyInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IsTenantAvailableInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isTenantAvailable(input?: IsTenantAvailableInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Account/IsTenantAvailable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IsTenantAvailableInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Account/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ��¼ʱ�����ֻ�֤��
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Account/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BindingThirdPartyInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindingThirdParty(input?: BindingThirdPartyInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).bindingThirdParty(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {IsTenantAvailableInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isTenantAvailable(input?: IsTenantAvailableInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IsTenantAvailableOutput> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).isTenantAvailable(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterOutput> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).register(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ��¼ʱ�����ֻ�֤��
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).sendPhoneNumberCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {BindingThirdPartyInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindingThirdParty(input?: BindingThirdPartyInput, options?: any) {
            return AccountApiFp(configuration).bindingThirdParty(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {IsTenantAvailableInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isTenantAvailable(input?: IsTenantAvailableInput, options?: any) {
            return AccountApiFp(configuration).isTenantAvailable(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options?: any) {
            return AccountApiFp(configuration).register(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ��¼ʱ�����ֻ�֤��
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
            return AccountApiFp(configuration).sendPhoneNumberCode(input, options)(fetch, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {BindingThirdPartyInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public bindingThirdParty(input?: BindingThirdPartyInput, options?: any) {
        return AccountApiFp(this.configuration).bindingThirdParty(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {IsTenantAvailableInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public isTenantAvailable(input?: IsTenantAvailableInput, options?: any) {
        return AccountApiFp(this.configuration).isTenantAvailable(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RegisterInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public register(input?: RegisterInput, options?: any) {
        return AccountApiFp(this.configuration).register(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ��¼ʱ�����ֻ�֤��
     * @param {PhoneWithCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
        return AccountApiFp(this.configuration).sendPhoneNumberCode(input, options)(this.fetch, this.basePath);
    }

}

/**
 * ActiveApi - fetch parameter creator
 * @export
 */
export const ActiveApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ConfirmEmailCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailByCode(input?: ConfirmEmailCodeInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Active/ConfirmEmailByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConfirmEmailCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumberByCode(input?: VerificationCodeInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Active/ConfirmPhoneNumberByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmEmailCode(input?: SendConfirmEmailByCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Active/SendConfirmEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送手机激活验证码
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmPhoneNumberByCode(input?: VerificationCodeInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Active/SendConfirmPhoneNumberByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActiveApi - functional programming interface
 * @export
 */
export const ActiveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ConfirmEmailCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailByCode(input?: ConfirmEmailCodeInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).confirmEmailByCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).confirmPhoneNumberByCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).sendConfirmEmailCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 发送手机激活验证码
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).sendConfirmPhoneNumberByCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ActiveApi - factory interface
 * @export
 */
export const ActiveApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ConfirmEmailCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailByCode(input?: ConfirmEmailCodeInput, options?: any) {
            return ActiveApiFp(configuration).confirmEmailByCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any) {
            return ActiveApiFp(configuration).confirmPhoneNumberByCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
            return ActiveApiFp(configuration).sendConfirmEmailCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 发送手机激活验证码
         * @param {VerificationCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConfirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any) {
            return ActiveApiFp(configuration).sendConfirmPhoneNumberByCode(input, options)(fetch, basePath);
        },
    };
};

/**
 * ActiveApi - object-oriented interface
 * @export
 * @class ActiveApi
 * @extends {BaseAPI}
 */
export class ActiveApi extends BaseAPI {
    /**
     * 
     * @param {ConfirmEmailCodeInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    public confirmEmailByCode(input?: ConfirmEmailCodeInput, options?: any) {
        return ActiveApiFp(this.configuration).confirmEmailByCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {VerificationCodeInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    public confirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any) {
        return ActiveApiFp(this.configuration).confirmPhoneNumberByCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 发送邮箱验证码
     * @param {SendConfirmEmailByCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    public sendConfirmEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
        return ActiveApiFp(this.configuration).sendConfirmEmailCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 发送手机激活验证码
     * @param {VerificationCodeInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    public sendConfirmPhoneNumberByCode(input?: VerificationCodeInput, options?: any) {
        return ActiveApiFp(this.configuration).sendConfirmPhoneNumberByCode(input, options)(this.fetch, this.basePath);
    }

}

/**
 * AliyunOssApi - fetch parameter creator
 * @export
 */
export const AliyunOssApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 加标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAddTag(input?: BatchUpdateTagInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/BatchAddTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchUpdateTagInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 减标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchSubTag(input?: BatchUpdateTagInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/BatchSubTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchUpdateTagInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查是否还能创建存储库
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canCreateAsync(options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/CanCreateAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 复制
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copy(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/Copy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceBucketName !== undefined) {
                localVarQueryParameter['sourceBucketName'] = sourceBucketName;
            }

            if (sourceKey !== undefined) {
                localVarQueryParameter['sourceKey'] = sourceKey;
            }

            if (destinationBucketName !== undefined) {
                localVarQueryParameter['destinationBucketName'] = destinationBucketName;
            }

            if (destinationKey !== undefined) {
                localVarQueryParameter['destinationKey'] = destinationKey;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 复制 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyBatch(input?: BatchToDestination, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/CopyBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchToDestination" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建存储库（Create Bucket）
         * @param {string} [bucketName] 
         * @param {string} [note] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(bucketName?: string, note?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/CreateBucket`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['bucketName'] = bucketName;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建文件夹
         * @param {string} bucketName 
         * @param {string} folder 
         * @param {Array<string>} [tagNames] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(bucketName: string, folder: string, tagNames?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling createFolder.');
            }
            // verify required parameter 'folder' is not null or undefined
            if (folder === null || folder === undefined) {
                throw new RequiredError('folder','Required parameter folder was null or undefined when calling createFolder.');
            }
            const localVarPath = `/api/AliyunOss/CreateFolder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (folder !== undefined) {
                localVarQueryParameter['Folder'] = folder;
            }

            if (tagNames) {
                localVarQueryParameter['TagNames'] = tagNames;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建文件 支持批量上传
         * @param {string} [bucketName] 
         * @param {string} [path] 位置文件夹
         * @param {Array<string>} [tagNames] 标签
         * @param {string} [filePath] 上传文件夹时，带了前缀路径的文件名 如：123/qwe/a.txt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(bucketName?: string, path?: string, tagNames?: Array<string>, filePath?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/CreateObject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            if (tagNames) {
                localVarQueryParameter['tagNames'] = tagNames;
            }

            if (filePath !== undefined) {
                localVarQueryParameter['filePath'] = filePath;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除存储库（Delete Bucket）
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(bucketName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/DeleteBucket`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['bucketName'] = bucketName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除文件或目录
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(bucketName: string, fileName?: string, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling deleteObject.');
            }
            const localVarPath = `/api/AliyunOss/DeleteObject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除文件 批量
         * @param {string} bucketName 
         * @param {Array<string>} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObjects(bucketName: string, fileName?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling deleteObjects.');
            }
            const localVarPath = `/api/AliyunOss/DeleteObjects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (fileName) {
                localVarQueryParameter['FileName'] = fileName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取存储库列表（List Bucket）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets(options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/GetBuckets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取文件
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(bucketName: string, fileName?: string, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling getObject.');
            }
            const localVarPath = `/api/AliyunOss/GetObject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取目录下的内容
         * @param {string} [bucketName] 
         * @param {string} [root] 目录
         * @param {boolean} [directoryOnly] 是否只要目录
         * @param {string} [sorting] 排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectListOfDirectory(bucketName?: string, root?: string, directoryOnly?: boolean, sorting?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/GetObjectListOfDirectory`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['bucketName'] = bucketName;
            }

            if (root !== undefined) {
                localVarQueryParameter['root'] = root;
            }

            if (directoryOnly !== undefined) {
                localVarQueryParameter['directoryOnly'] = directoryOnly;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['sorting'] = sorting;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {number} [maxParts] 
         * @param {number} [partNumberMarker] 
         * @param {string} [encodingType] 
         * @param {string} [uploadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParts(bucketName?: string, key?: string, maxParts?: number, partNumberMarker?: number, encodingType?: string, uploadId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/GetParts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (key !== undefined) {
                localVarQueryParameter['Key'] = key;
            }

            if (maxParts !== undefined) {
                localVarQueryParameter['MaxParts'] = maxParts;
            }

            if (partNumberMarker !== undefined) {
                localVarQueryParameter['PartNumberMarker'] = partNumberMarker;
            }

            if (encodingType !== undefined) {
                localVarQueryParameter['EncodingType'] = encodingType;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['UploadId'] = uploadId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定对象的Tags
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(bucketName?: string, key?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/GetTags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['bucketName'] = bucketName;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移动
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/Move`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceBucketName !== undefined) {
                localVarQueryParameter['sourceBucketName'] = sourceBucketName;
            }

            if (sourceKey !== undefined) {
                localVarQueryParameter['sourceKey'] = sourceKey;
            }

            if (destinationBucketName !== undefined) {
                localVarQueryParameter['destinationBucketName'] = destinationBucketName;
            }

            if (destinationKey !== undefined) {
                localVarQueryParameter['destinationKey'] = destinationKey;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移动 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBatch(input?: BatchToDestination, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/MoveBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchToDestination" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullAllBucketData(options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/PullAllBucketData`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullData(bucketName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/PullData`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['bucketName'] = bucketName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重命名
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(sourceBucketName?: string, sourceKey?: string, destinationKey?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/Rename`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceBucketName !== undefined) {
                localVarQueryParameter['sourceBucketName'] = sourceBucketName;
            }

            if (sourceKey !== undefined) {
                localVarQueryParameter['sourceKey'] = sourceKey;
            }

            if (destinationKey !== undefined) {
                localVarQueryParameter['destinationKey'] = destinationKey;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 搜索
         * @param {string} bucketName 
         * @param {string} [root] 搜索目录
         * @param {string} [name] 文件名\\文件夹名
         * @param {Array<string>} [tagNames] 标签
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sorting] 排序 Name、ExtensionName、LastModified、Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(bucketName: string, root?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sorting?: string, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling search.');
            }
            const localVarPath = `/api/AliyunOss/Search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (root !== undefined) {
                localVarQueryParameter['Root'] = root;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (tagNames) {
                localVarQueryParameter['TagNames'] = tagNames;
            }

            if (extensionNames) {
                localVarQueryParameter['ExtensionNames'] = extensionNames;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllObjectResolution(options: any = {}): FetchArgs {
            const localVarPath = `/api/AliyunOss/SetAllObjectResolution`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} bucketName 
         * @param {string} key 
         * @param {Array<string>} [tagNames] 
         * @param {boolean} [applyAllChild] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(bucketName: string, key: string, tagNames?: Array<string>, applyAllChild?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling updateTag.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateTag.');
            }
            const localVarPath = `/api/AliyunOss/UpdateTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (key !== undefined) {
                localVarQueryParameter['Key'] = key;
            }

            if (tagNames) {
                localVarQueryParameter['TagNames'] = tagNames;
            }

            if (applyAllChild !== undefined) {
                localVarQueryParameter['ApplyAllChild'] = applyAllChild;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AliyunOssApi - functional programming interface
 * @export
 */
export const AliyunOssApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 加标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAddTag(input?: BatchUpdateTagInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).batchAddTag(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 减标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchSubTag(input?: BatchUpdateTagInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).batchSubTag(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 检查是否还能创建存储库
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canCreateAsync(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).canCreateAsync(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 复制
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copy(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).copy(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 复制 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyBatch(input?: BatchToDestination, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).copyBatch(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 创建存储库（Create Bucket）
         * @param {string} [bucketName] 
         * @param {string} [note] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(bucketName?: string, note?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Bucket430> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).createBucket(bucketName, note, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 创建文件夹
         * @param {string} bucketName 
         * @param {string} folder 
         * @param {Array<string>} [tagNames] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(bucketName: string, folder: string, tagNames?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).createFolder(bucketName, folder, tagNames, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 创建文件 支持批量上传
         * @param {string} [bucketName] 
         * @param {string} [path] 位置文件夹
         * @param {Array<string>} [tagNames] 标签
         * @param {string} [filePath] 上传文件夹时，带了前缀路径的文件名 如：123/qwe/a.txt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(bucketName?: string, path?: string, tagNames?: Array<string>, filePath?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).createObject(bucketName, path, tagNames, filePath, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除存储库（Delete Bucket）
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(bucketName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).deleteBucket(bucketName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除文件或目录
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(bucketName: string, fileName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).deleteObject(bucketName, fileName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除文件 批量
         * @param {string} bucketName 
         * @param {Array<string>} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObjects(bucketName: string, fileName?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).deleteObjects(bucketName, fileName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取存储库列表（List Bucket）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Bucket430>> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).getBuckets(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取文件
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(bucketName: string, fileName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).getObject(bucketName, fileName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取目录下的内容
         * @param {string} [bucketName] 
         * @param {string} [root] 目录
         * @param {boolean} [directoryOnly] 是否只要目录
         * @param {string} [sorting] 排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectListOfDirectory(bucketName?: string, root?: string, directoryOnly?: boolean, sorting?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OSSObjectDto>> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).getObjectListOfDirectory(bucketName, root, directoryOnly, sorting, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {number} [maxParts] 
         * @param {number} [partNumberMarker] 
         * @param {string} [encodingType] 
         * @param {string} [uploadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParts(bucketName?: string, key?: string, maxParts?: number, partNumberMarker?: number, encodingType?: string, uploadId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PartListing> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).getParts(bucketName, key, maxParts, partNumberMarker, encodingType, uploadId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取指定对象的Tags
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(bucketName?: string, key?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).getTags(bucketName, key, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 移动
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).move(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 移动 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBatch(input?: BatchToDestination, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).moveBatch(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullAllBucketData(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).pullAllBucketData(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullData(bucketName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).pullData(bucketName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 重命名
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(sourceBucketName?: string, sourceKey?: string, destinationKey?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).rename(sourceBucketName, sourceKey, destinationKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 搜索
         * @param {string} bucketName 
         * @param {string} [root] 搜索目录
         * @param {string} [name] 文件名\\文件夹名
         * @param {Array<string>} [tagNames] 标签
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sorting] 排序 Name、ExtensionName、LastModified、Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(bucketName: string, root?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sorting?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OSSObjectDto>> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).search(bucketName, root, name, tagNames, extensionNames, sorting, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllObjectResolution(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<number> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).setAllObjectResolution(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} bucketName 
         * @param {string} key 
         * @param {Array<string>} [tagNames] 
         * @param {boolean} [applyAllChild] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(bucketName: string, key: string, tagNames?: Array<string>, applyAllChild?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AliyunOssApiFetchParamCreator(configuration).updateTag(bucketName, key, tagNames, applyAllChild, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AliyunOssApi - factory interface
 * @export
 */
export const AliyunOssApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 加标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchAddTag(input?: BatchUpdateTagInput, options?: any) {
            return AliyunOssApiFp(configuration).batchAddTag(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 减标签 (批量）(递归)
         * @param {BatchUpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchSubTag(input?: BatchUpdateTagInput, options?: any) {
            return AliyunOssApiFp(configuration).batchSubTag(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 检查是否还能创建存储库
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        canCreateAsync(options?: any) {
            return AliyunOssApiFp(configuration).canCreateAsync(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 复制
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copy(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any) {
            return AliyunOssApiFp(configuration).copy(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 复制 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyBatch(input?: BatchToDestination, options?: any) {
            return AliyunOssApiFp(configuration).copyBatch(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 创建存储库（Create Bucket）
         * @param {string} [bucketName] 
         * @param {string} [note] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(bucketName?: string, note?: string, options?: any) {
            return AliyunOssApiFp(configuration).createBucket(bucketName, note, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 创建文件夹
         * @param {string} bucketName 
         * @param {string} folder 
         * @param {Array<string>} [tagNames] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(bucketName: string, folder: string, tagNames?: Array<string>, options?: any) {
            return AliyunOssApiFp(configuration).createFolder(bucketName, folder, tagNames, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 创建文件 支持批量上传
         * @param {string} [bucketName] 
         * @param {string} [path] 位置文件夹
         * @param {Array<string>} [tagNames] 标签
         * @param {string} [filePath] 上传文件夹时，带了前缀路径的文件名 如：123/qwe/a.txt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(bucketName?: string, path?: string, tagNames?: Array<string>, filePath?: string, options?: any) {
            return AliyunOssApiFp(configuration).createObject(bucketName, path, tagNames, filePath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除存储库（Delete Bucket）
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(bucketName?: string, options?: any) {
            return AliyunOssApiFp(configuration).deleteBucket(bucketName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除文件或目录
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(bucketName: string, fileName?: string, options?: any) {
            return AliyunOssApiFp(configuration).deleteObject(bucketName, fileName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除文件 批量
         * @param {string} bucketName 
         * @param {Array<string>} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObjects(bucketName: string, fileName?: Array<string>, options?: any) {
            return AliyunOssApiFp(configuration).deleteObjects(bucketName, fileName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取存储库列表（List Bucket）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets(options?: any) {
            return AliyunOssApiFp(configuration).getBuckets(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取文件
         * @param {string} bucketName 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(bucketName: string, fileName?: string, options?: any) {
            return AliyunOssApiFp(configuration).getObject(bucketName, fileName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取目录下的内容
         * @param {string} [bucketName] 
         * @param {string} [root] 目录
         * @param {boolean} [directoryOnly] 是否只要目录
         * @param {string} [sorting] 排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectListOfDirectory(bucketName?: string, root?: string, directoryOnly?: boolean, sorting?: string, options?: any) {
            return AliyunOssApiFp(configuration).getObjectListOfDirectory(bucketName, root, directoryOnly, sorting, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {number} [maxParts] 
         * @param {number} [partNumberMarker] 
         * @param {string} [encodingType] 
         * @param {string} [uploadId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParts(bucketName?: string, key?: string, maxParts?: number, partNumberMarker?: number, encodingType?: string, uploadId?: string, options?: any) {
            return AliyunOssApiFp(configuration).getParts(bucketName, key, maxParts, partNumberMarker, encodingType, uploadId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取指定对象的Tags
         * @param {string} [bucketName] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(bucketName?: string, key?: string, options?: any) {
            return AliyunOssApiFp(configuration).getTags(bucketName, key, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 移动
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationBucketName] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any) {
            return AliyunOssApiFp(configuration).move(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 移动 (批量）(递归)
         * @param {BatchToDestination} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBatch(input?: BatchToDestination, options?: any) {
            return AliyunOssApiFp(configuration).moveBatch(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullAllBucketData(options?: any) {
            return AliyunOssApiFp(configuration).pullAllBucketData(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
         * @param {string} [bucketName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullData(bucketName?: string, options?: any) {
            return AliyunOssApiFp(configuration).pullData(bucketName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 重命名
         * @param {string} [sourceBucketName] 
         * @param {string} [sourceKey] 
         * @param {string} [destinationKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename(sourceBucketName?: string, sourceKey?: string, destinationKey?: string, options?: any) {
            return AliyunOssApiFp(configuration).rename(sourceBucketName, sourceKey, destinationKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 搜索
         * @param {string} bucketName 
         * @param {string} [root] 搜索目录
         * @param {string} [name] 文件名\\文件夹名
         * @param {Array<string>} [tagNames] 标签
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sorting] 排序 Name、ExtensionName、LastModified、Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(bucketName: string, root?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sorting?: string, options?: any) {
            return AliyunOssApiFp(configuration).search(bucketName, root, name, tagNames, extensionNames, sorting, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllObjectResolution(options?: any) {
            return AliyunOssApiFp(configuration).setAllObjectResolution(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新标签
         * @param {string} bucketName 
         * @param {string} key 
         * @param {Array<string>} [tagNames] 
         * @param {boolean} [applyAllChild] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(bucketName: string, key: string, tagNames?: Array<string>, applyAllChild?: boolean, options?: any) {
            return AliyunOssApiFp(configuration).updateTag(bucketName, key, tagNames, applyAllChild, options)(fetch, basePath);
        },
    };
};

/**
 * AliyunOssApi - object-oriented interface
 * @export
 * @class AliyunOssApi
 * @extends {BaseAPI}
 */
export class AliyunOssApi extends BaseAPI {
    /**
     * 
     * @summary 加标签 (批量）(递归)
     * @param {BatchUpdateTagInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public batchAddTag(input?: BatchUpdateTagInput, options?: any) {
        return AliyunOssApiFp(this.configuration).batchAddTag(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 减标签 (批量）(递归)
     * @param {BatchUpdateTagInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public batchSubTag(input?: BatchUpdateTagInput, options?: any) {
        return AliyunOssApiFp(this.configuration).batchSubTag(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 检查是否还能创建存储库
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public canCreateAsync(options?: any) {
        return AliyunOssApiFp(this.configuration).canCreateAsync(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 复制
     * @param {string} [sourceBucketName] 
     * @param {string} [sourceKey] 
     * @param {string} [destinationBucketName] 
     * @param {string} [destinationKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public copy(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).copy(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 复制 (批量）(递归)
     * @param {BatchToDestination} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public copyBatch(input?: BatchToDestination, options?: any) {
        return AliyunOssApiFp(this.configuration).copyBatch(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 创建存储库（Create Bucket）
     * @param {string} [bucketName] 
     * @param {string} [note] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public createBucket(bucketName?: string, note?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).createBucket(bucketName, note, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 创建文件夹
     * @param {string} bucketName 
     * @param {string} folder 
     * @param {Array<string>} [tagNames] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public createFolder(bucketName: string, folder: string, tagNames?: Array<string>, options?: any) {
        return AliyunOssApiFp(this.configuration).createFolder(bucketName, folder, tagNames, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 创建文件 支持批量上传
     * @param {string} [bucketName] 
     * @param {string} [path] 位置文件夹
     * @param {Array<string>} [tagNames] 标签
     * @param {string} [filePath] 上传文件夹时，带了前缀路径的文件名 如：123/qwe/a.txt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public createObject(bucketName?: string, path?: string, tagNames?: Array<string>, filePath?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).createObject(bucketName, path, tagNames, filePath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除存储库（Delete Bucket）
     * @param {string} [bucketName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public deleteBucket(bucketName?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).deleteBucket(bucketName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除文件或目录
     * @param {string} bucketName 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public deleteObject(bucketName: string, fileName?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).deleteObject(bucketName, fileName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除文件 批量
     * @param {string} bucketName 
     * @param {Array<string>} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public deleteObjects(bucketName: string, fileName?: Array<string>, options?: any) {
        return AliyunOssApiFp(this.configuration).deleteObjects(bucketName, fileName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取存储库列表（List Bucket）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public getBuckets(options?: any) {
        return AliyunOssApiFp(this.configuration).getBuckets(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取文件
     * @param {string} bucketName 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public getObject(bucketName: string, fileName?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).getObject(bucketName, fileName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取目录下的内容
     * @param {string} [bucketName] 
     * @param {string} [root] 目录
     * @param {boolean} [directoryOnly] 是否只要目录
     * @param {string} [sorting] 排序
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public getObjectListOfDirectory(bucketName?: string, root?: string, directoryOnly?: boolean, sorting?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).getObjectListOfDirectory(bucketName, root, directoryOnly, sorting, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [bucketName] 
     * @param {string} [key] 
     * @param {number} [maxParts] 
     * @param {number} [partNumberMarker] 
     * @param {string} [encodingType] 
     * @param {string} [uploadId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public getParts(bucketName?: string, key?: string, maxParts?: number, partNumberMarker?: number, encodingType?: string, uploadId?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).getParts(bucketName, key, maxParts, partNumberMarker, encodingType, uploadId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取指定对象的Tags
     * @param {string} [bucketName] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public getTags(bucketName?: string, key?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).getTags(bucketName, key, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 移动
     * @param {string} [sourceBucketName] 
     * @param {string} [sourceKey] 
     * @param {string} [destinationBucketName] 
     * @param {string} [destinationKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public move(sourceBucketName?: string, sourceKey?: string, destinationBucketName?: string, destinationKey?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).move(sourceBucketName, sourceKey, destinationBucketName, destinationKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 移动 (批量）(递归)
     * @param {BatchToDestination} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public moveBatch(input?: BatchToDestination, options?: any) {
        return AliyunOssApiFp(this.configuration).moveBatch(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public pullAllBucketData(options?: any) {
        return AliyunOssApiFp(this.configuration).pullAllBucketData(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 从oss服务器更新本地数据(一般是初始化本地数据时使用)
     * @param {string} [bucketName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public pullData(bucketName?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).pullData(bucketName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 重命名
     * @param {string} [sourceBucketName] 
     * @param {string} [sourceKey] 
     * @param {string} [destinationKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public rename(sourceBucketName?: string, sourceKey?: string, destinationKey?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).rename(sourceBucketName, sourceKey, destinationKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 搜索
     * @param {string} bucketName 
     * @param {string} [root] 搜索目录
     * @param {string} [name] 文件名\\文件夹名
     * @param {Array<string>} [tagNames] 标签
     * @param {Array<string>} [extensionNames] 扩展名
     * @param {string} [sorting] 排序 Name、ExtensionName、LastModified、Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public search(bucketName: string, root?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sorting?: string, options?: any) {
        return AliyunOssApiFp(this.configuration).search(bucketName, root, name, tagNames, extensionNames, sorting, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public setAllObjectResolution(options?: any) {
        return AliyunOssApiFp(this.configuration).setAllObjectResolution(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新标签
     * @param {string} bucketName 
     * @param {string} key 
     * @param {Array<string>} [tagNames] 
     * @param {boolean} [applyAllChild] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliyunOssApi
     */
    public updateTag(bucketName: string, key: string, tagNames?: Array<string>, applyAllChild?: boolean, options?: any) {
        return AliyunOssApiFp(this.configuration).updateTag(bucketName, key, tagNames, applyAllChild, options)(this.fetch, this.basePath);
    }

}

/**
 * AppEditionsApi - fetch parameter creator
 * @export
 */
export const AppEditionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VersionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUpdate(input?: VersionInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/CheckUpdate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndroidAppEdition(input?: CreateAndroidAppEditionInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/CreateAndroidAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIOSAppEdition(input?: CreateIOSAppEditionInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/CreateIOSAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppEdition(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/DeleteAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAppEdition(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/DownloadAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/GetAbout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['Version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutAndCheckUpdate(version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/GetAboutAndCheckUpdate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['Version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {0 | 1 | 2} [appSearchType] 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppEditions(appSearchType?: 0 | 1 | 2, filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/GetAppEditions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appSearchType !== undefined) {
                localVarQueryParameter['AppSearchType'] = appSearchType;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndroidAppEdition(input?: UpdateAndroidAppEditionInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/UpdateAndroidAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIOSAppEdition(input?: UpdateIOSAppEditionInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/UpdateIOSAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAppEdition(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppEditions/UploadAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppEditionsApi - functional programming interface
 * @export
 */
export const AppEditionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VersionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUpdate(input?: VersionInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckUpdateOutput> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).checkUpdate(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndroidAppEdition(input?: CreateAndroidAppEditionInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).createAndroidAppEdition(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIOSAppEdition(input?: CreateIOSAppEditionInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).createIOSAppEdition(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppEdition(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).deleteAppEdition(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAppEdition(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).downloadAppEdition(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AboutOutput> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).getAbout(version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutAndCheckUpdate(version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAboutAndCheckUpdateOutput> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).getAboutAndCheckUpdate(version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {0 | 1 | 2} [appSearchType] 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppEditions(appSearchType?: 0 | 1 | 2, filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoAppEditionDto> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).getAppEditions(appSearchType, filter, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndroidAppEdition(input?: UpdateAndroidAppEditionInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).updateAndroidAppEdition(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIOSAppEdition(input?: UpdateIOSAppEditionInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).updateIOSAppEdition(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAppEdition(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).uploadAppEdition(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AppEditionsApi - factory interface
 * @export
 */
export const AppEditionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {VersionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUpdate(input?: VersionInput, options?: any) {
            return AppEditionsApiFp(configuration).checkUpdate(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndroidAppEdition(input?: CreateAndroidAppEditionInput, options?: any) {
            return AppEditionsApiFp(configuration).createAndroidAppEdition(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIOSAppEdition(input?: CreateIOSAppEditionInput, options?: any) {
            return AppEditionsApiFp(configuration).createIOSAppEdition(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppEdition(id?: number, options?: any) {
            return AppEditionsApiFp(configuration).deleteAppEdition(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAppEdition(id?: number, options?: any) {
            return AppEditionsApiFp(configuration).downloadAppEdition(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(version?: string, options?: any) {
            return AppEditionsApiFp(configuration).getAbout(version, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutAndCheckUpdate(version?: string, options?: any) {
            return AppEditionsApiFp(configuration).getAboutAndCheckUpdate(version, options)(fetch, basePath);
        },
        /**
         * 
         * @param {0 | 1 | 2} [appSearchType] 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppEditions(appSearchType?: 0 | 1 | 2, filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return AppEditionsApiFp(configuration).getAppEditions(appSearchType, filter, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateAndroidAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndroidAppEdition(input?: UpdateAndroidAppEditionInput, options?: any) {
            return AppEditionsApiFp(configuration).updateAndroidAppEdition(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateIOSAppEditionInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIOSAppEdition(input?: UpdateIOSAppEditionInput, options?: any) {
            return AppEditionsApiFp(configuration).updateIOSAppEdition(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAppEdition(options?: any) {
            return AppEditionsApiFp(configuration).uploadAppEdition(options)(fetch, basePath);
        },
    };
};

/**
 * AppEditionsApi - object-oriented interface
 * @export
 * @class AppEditionsApi
 * @extends {BaseAPI}
 */
export class AppEditionsApi extends BaseAPI {
    /**
     * 
     * @param {VersionInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public checkUpdate(input?: VersionInput, options?: any) {
        return AppEditionsApiFp(this.configuration).checkUpdate(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateAndroidAppEditionInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public createAndroidAppEdition(input?: CreateAndroidAppEditionInput, options?: any) {
        return AppEditionsApiFp(this.configuration).createAndroidAppEdition(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateIOSAppEditionInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public createIOSAppEdition(input?: CreateIOSAppEditionInput, options?: any) {
        return AppEditionsApiFp(this.configuration).createIOSAppEdition(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public deleteAppEdition(id?: number, options?: any) {
        return AppEditionsApiFp(this.configuration).deleteAppEdition(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public downloadAppEdition(id?: number, options?: any) {
        return AppEditionsApiFp(this.configuration).downloadAppEdition(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public getAbout(version?: string, options?: any) {
        return AppEditionsApiFp(this.configuration).getAbout(version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public getAboutAndCheckUpdate(version?: string, options?: any) {
        return AppEditionsApiFp(this.configuration).getAboutAndCheckUpdate(version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {0 | 1 | 2} [appSearchType] 
     * @param {string} [filter] 过滤条件
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public getAppEditions(appSearchType?: 0 | 1 | 2, filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return AppEditionsApiFp(this.configuration).getAppEditions(appSearchType, filter, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateAndroidAppEditionInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public updateAndroidAppEdition(input?: UpdateAndroidAppEditionInput, options?: any) {
        return AppEditionsApiFp(this.configuration).updateAndroidAppEdition(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateIOSAppEditionInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public updateIOSAppEdition(input?: UpdateIOSAppEditionInput, options?: any) {
        return AppEditionsApiFp(this.configuration).updateIOSAppEdition(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    public uploadAppEdition(options?: any) {
        return AppEditionsApiFp(this.configuration).uploadAppEdition(options)(this.fetch, this.basePath);
    }

}

/**
 * AppStartPageApi - fetch parameter creator
 * @export
 */
export const AppStartPageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateAppStartPageDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options: any = {}): FetchArgs {
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling deleteBatch.');
            }
            const localVarPath = `/api/services/app/AppStartPage/DeleteBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (value) {
                localVarQueryParameter['Value'] = value;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary App端： 获取图片
         * @param {1 | 2} [platform] 平台 Android &#x3D; 1, IOS &#x3D; 2   （创建默认值时，该项可空）
         * @param {number} [widthPx] 分辨率 宽  （创建默认值时，该项可空）
         * @param {number} [highPx] 分辨率 高  （创建默认值时，该项可空）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppStartPage(platform?: 1 | 2, widthPx?: number, highPx?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/GetAppStartPage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (platform !== undefined) {
                localVarQueryParameter['Platform'] = platform;
            }

            if (widthPx !== undefined) {
                localVarQueryParameter['Width_Px'] = widthPx;
            }

            if (highPx !== undefined) {
                localVarQueryParameter['High_Px'] = highPx;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUpdated(input?: IsUpatedInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/IsUpdated`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IsUpatedInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateAppStartPageDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AppStartPage/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppStartPageApi - functional programming interface
 * @export
 */
export const AppStartPageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateAppStartPageDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListAppStartPageDto> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).deleteBatch(value, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListAppStartPageDto> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoGetListAppStartPageDto> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).getAll(filter, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary App端： 获取图片
         * @param {1 | 2} [platform] 平台 Android &#x3D; 1, IOS &#x3D; 2   （创建默认值时，该项可空）
         * @param {number} [widthPx] 分辨率 宽  （创建默认值时，该项可空）
         * @param {number} [highPx] 分辨率 高  （创建默认值时，该项可空）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppStartPage(platform?: 1 | 2, widthPx?: number, highPx?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAppStartPageDto> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).getAppStartPage(platform, widthPx, highPx, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUpdated(input?: IsUpatedInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).isUpdated(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateAppStartPageDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListAppStartPageDto> {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AppStartPageApi - factory interface
 * @export
 */
export const AppStartPageApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return AppStartPageApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateAppStartPageDto, options?: any) {
            return AppStartPageApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any) {
            return AppStartPageApiFp(configuration).deleteBatch(value, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return AppStartPageApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return AppStartPageApiFp(configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary App端： 获取图片
         * @param {1 | 2} [platform] 平台 Android &#x3D; 1, IOS &#x3D; 2   （创建默认值时，该项可空）
         * @param {number} [widthPx] 分辨率 宽  （创建默认值时，该项可空）
         * @param {number} [highPx] 分辨率 高  （创建默认值时，该项可空）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppStartPage(platform?: 1 | 2, widthPx?: number, highPx?: number, options?: any) {
            return AppStartPageApiFp(configuration).getAppStartPage(platform, widthPx, highPx, options)(fetch, basePath);
        },
        /**
         * 
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUpdated(input?: IsUpatedInput, options?: any) {
            return AppStartPageApiFp(configuration).isUpdated(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateAppStartPageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateAppStartPageDto, options?: any) {
            return AppStartPageApiFp(configuration).update(input, options)(fetch, basePath);
        },
    };
};

/**
 * AppStartPageApi - object-oriented interface
 * @export
 * @class AppStartPageApi
 * @extends {BaseAPI}
 */
export class AppStartPageApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public _delete(id?: number, options?: any) {
        return AppStartPageApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateAppStartPageDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public create(input?: CreateAppStartPageDto, options?: any) {
        return AppStartPageApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<number>} value 数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public deleteBatch(value: Array<number>, options?: any) {
        return AppStartPageApiFp(this.configuration).deleteBatch(value, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public get(id?: number, options?: any) {
        return AppStartPageApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filter] 过滤条件
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return AppStartPageApiFp(this.configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary App端： 获取图片
     * @param {1 | 2} [platform] 平台 Android &#x3D; 1, IOS &#x3D; 2   （创建默认值时，该项可空）
     * @param {number} [widthPx] 分辨率 宽  （创建默认值时，该项可空）
     * @param {number} [highPx] 分辨率 高  （创建默认值时，该项可空）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public getAppStartPage(platform?: 1 | 2, widthPx?: number, highPx?: number, options?: any) {
        return AppStartPageApiFp(this.configuration).getAppStartPage(platform, widthPx, highPx, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary App端： 检查图片是否有更新
     * @param {IsUpatedInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public isUpdated(input?: IsUpatedInput, options?: any) {
        return AppStartPageApiFp(this.configuration).isUpdated(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateAppStartPageDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    public update(input?: UpdateAppStartPageDto, options?: any) {
        return AppStartPageApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

}

/**
 * AuditLogApi - fetch parameter creator
 * @export
 */
export const AuditLogApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AuditLog/GetAuditLogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any).toISOString();
            }

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (serviceName !== undefined) {
                localVarQueryParameter['ServiceName'] = serviceName;
            }

            if (methodName !== undefined) {
                localVarQueryParameter['MethodName'] = methodName;
            }

            if (browserInfo !== undefined) {
                localVarQueryParameter['BrowserInfo'] = browserInfo;
            }

            if (hasException !== undefined) {
                localVarQueryParameter['HasException'] = hasException;
            }

            if (minExecutionDuration !== undefined) {
                localVarQueryParameter['MinExecutionDuration'] = minExecutionDuration;
            }

            if (maxExecutionDuration !== undefined) {
                localVarQueryParameter['MaxExecutionDuration'] = maxExecutionDuration;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogsToExcel(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/AuditLog/GetAuditLogsToExcel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any).toISOString();
            }

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (serviceName !== undefined) {
                localVarQueryParameter['ServiceName'] = serviceName;
            }

            if (methodName !== undefined) {
                localVarQueryParameter['MethodName'] = methodName;
            }

            if (browserInfo !== undefined) {
                localVarQueryParameter['BrowserInfo'] = browserInfo;
            }

            if (hasException !== undefined) {
                localVarQueryParameter['HasException'] = hasException;
            }

            if (minExecutionDuration !== undefined) {
                localVarQueryParameter['MinExecutionDuration'] = minExecutionDuration;
            }

            if (maxExecutionDuration !== undefined) {
                localVarQueryParameter['MaxExecutionDuration'] = maxExecutionDuration;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogApi - functional programming interface
 * @export
 */
export const AuditLogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoAuditLogListDto> {
            const localVarFetchArgs = AuditLogApiFetchParamCreator(configuration).getAuditLogs(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogsToExcel(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileDto> {
            const localVarFetchArgs = AuditLogApiFetchParamCreator(configuration).getAuditLogsToExcel(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuditLogApi - factory interface
 * @export
 */
export const AuditLogApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
            return AuditLogApiFp(configuration).getAuditLogs(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [userName] 
         * @param {string} [serviceName] 
         * @param {string} [methodName] 
         * @param {string} [browserInfo] 
         * @param {boolean} [hasException] 
         * @param {number} [minExecutionDuration] 
         * @param {number} [maxExecutionDuration] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogsToExcel(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
            return AuditLogApiFp(configuration).getAuditLogsToExcel(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options)(fetch, basePath);
        },
    };
};

/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
export class AuditLogApi extends BaseAPI {
    /**
     * 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {string} [userName] 
     * @param {string} [serviceName] 
     * @param {string} [methodName] 
     * @param {string} [browserInfo] 
     * @param {boolean} [hasException] 
     * @param {number} [minExecutionDuration] 
     * @param {number} [maxExecutionDuration] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public getAuditLogs(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
        return AuditLogApiFp(this.configuration).getAuditLogs(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {string} [userName] 
     * @param {string} [serviceName] 
     * @param {string} [methodName] 
     * @param {string} [browserInfo] 
     * @param {boolean} [hasException] 
     * @param {number} [minExecutionDuration] 
     * @param {number} [maxExecutionDuration] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    public getAuditLogsToExcel(startDate?: Date, endDate?: Date, userName?: string, serviceName?: string, methodName?: string, browserInfo?: string, hasException?: boolean, minExecutionDuration?: number, maxExecutionDuration?: number, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
        return AuditLogApiFp(this.configuration).getAuditLogsToExcel(startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

}

/**
 * ChatApi - fetch parameter creator
 * @export
 */
export const ChatApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatFriendsWithSettings(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Chat/GetUserChatFriendsWithSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [tenantId] 
         * @param {number} [userId] 
         * @param {number} [minMessageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatMessages(tenantId?: number, userId?: number, minMessageId?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Chat/GetUserChatMessages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['TenantId'] = tenantId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (minMessageId !== undefined) {
                localVarQueryParameter['MinMessageId'] = minMessageId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUnreadMessagesOfUserAsRead(input?: MarkAllUnreadMessagesOfUserAsReadInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MarkAllUnreadMessagesOfUserAsReadInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatFriendsWithSettings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUserChatFriendsWithSettingsOutput> {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).getUserChatFriendsWithSettings(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [tenantId] 
         * @param {number} [userId] 
         * @param {number} [minMessageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatMessages(tenantId?: number, userId?: number, minMessageId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoChatMessageDto> {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).getUserChatMessages(tenantId, userId, minMessageId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUnreadMessagesOfUserAsRead(input?: MarkAllUnreadMessagesOfUserAsReadInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).markAllUnreadMessagesOfUserAsRead(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatFriendsWithSettings(options?: any) {
            return ChatApiFp(configuration).getUserChatFriendsWithSettings(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [tenantId] 
         * @param {number} [userId] 
         * @param {number} [minMessageId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChatMessages(tenantId?: number, userId?: number, minMessageId?: number, options?: any) {
            return ChatApiFp(configuration).getUserChatMessages(tenantId, userId, minMessageId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUnreadMessagesOfUserAsRead(input?: MarkAllUnreadMessagesOfUserAsReadInput, options?: any) {
            return ChatApiFp(configuration).markAllUnreadMessagesOfUserAsRead(input, options)(fetch, basePath);
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getUserChatFriendsWithSettings(options?: any) {
        return ChatApiFp(this.configuration).getUserChatFriendsWithSettings(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [tenantId] 
     * @param {number} [userId] 
     * @param {number} [minMessageId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getUserChatMessages(tenantId?: number, userId?: number, minMessageId?: number, options?: any) {
        return ChatApiFp(this.configuration).getUserChatMessages(tenantId, userId, minMessageId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {MarkAllUnreadMessagesOfUserAsReadInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public markAllUnreadMessagesOfUserAsRead(input?: MarkAllUnreadMessagesOfUserAsReadInput, options?: any) {
        return ChatApiFp(this.configuration).markAllUnreadMessagesOfUserAsRead(input, options)(this.fetch, this.basePath);
    }

}

/**
 * ClientApi - fetch parameter creator
 * @export
 */
export const ClientApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加一个Client
         * @param {CreateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsync(input?: CreateClientDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/CreateAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateClientDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsync(id?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/DeleteAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查找全部Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAsync(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/GetAllAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查找一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsync(id?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/GetAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部策略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/GetPolicies`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取一个Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/GetSecret`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改一个Client
         * @param {UpdateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsync(input?: UpdateClientDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/UpdateAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateClientDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新Secret
         * @param {UpdateSecretInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecretAsync(input?: UpdateSecretInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Client/UpdateSecretAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateSecretInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加一个Client
         * @param {CreateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsync(input?: CreateClientDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientDto> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).createAsync(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsync(id?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).deleteAsync(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查找全部Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAsync(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ClientDto>> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).getAllAsync(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查找一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsync(id?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientDto> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).getAsync(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取全部策略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Policy>> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).getPolicies(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取一个Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).getSecret(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改一个Client
         * @param {UpdateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsync(input?: UpdateClientDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientDto> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).updateAsync(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新Secret
         * @param {UpdateSecretInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecretAsync(input?: UpdateSecretInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Client> {
            const localVarFetchArgs = ClientApiFetchParamCreator(configuration).updateSecretAsync(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 添加一个Client
         * @param {CreateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsync(input?: CreateClientDto, options?: any) {
            return ClientApiFp(configuration).createAsync(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAsync(id?: string, options?: any) {
            return ClientApiFp(configuration).deleteAsync(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查找全部Client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAsync(options?: any) {
            return ClientApiFp(configuration).getAllAsync(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查找一个Client
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsync(id?: string, options?: any) {
            return ClientApiFp(configuration).getAsync(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取全部策略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(options?: any) {
            return ClientApiFp(configuration).getPolicies(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取一个Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(options?: any) {
            return ClientApiFp(configuration).getSecret(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改一个Client
         * @param {UpdateClientDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAsync(input?: UpdateClientDto, options?: any) {
            return ClientApiFp(configuration).updateAsync(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新Secret
         * @param {UpdateSecretInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecretAsync(input?: UpdateSecretInput, options?: any) {
            return ClientApiFp(configuration).updateSecretAsync(input, options)(fetch, basePath);
        },
    };
};

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
    /**
     * 
     * @summary 添加一个Client
     * @param {CreateClientDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public createAsync(input?: CreateClientDto, options?: any) {
        return ClientApiFp(this.configuration).createAsync(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除一个Client
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public deleteAsync(id?: string, options?: any) {
        return ClientApiFp(this.configuration).deleteAsync(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查找全部Client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public getAllAsync(options?: any) {
        return ClientApiFp(this.configuration).getAllAsync(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查找一个Client
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public getAsync(id?: string, options?: any) {
        return ClientApiFp(this.configuration).getAsync(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取全部策略
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public getPolicies(options?: any) {
        return ClientApiFp(this.configuration).getPolicies(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取一个Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public getSecret(options?: any) {
        return ClientApiFp(this.configuration).getSecret(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改一个Client
     * @param {UpdateClientDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public updateAsync(input?: UpdateClientDto, options?: any) {
        return ClientApiFp(this.configuration).updateAsync(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新Secret
     * @param {UpdateSecretInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public updateSecretAsync(input?: UpdateSecretInput, options?: any) {
        return ClientApiFp(this.configuration).updateSecretAsync(input, options)(this.fetch, this.basePath);
    }

}

/**
 * ConfigurationApi - fetch parameter creator
 * @export
 */
export const ConfigurationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SiteUrlInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSiteUrl(input?: SiteUrlInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/ChangeSiteUrl`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SiteUrlInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeUiThemeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUiTheme(input?: ChangeUiThemeInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/ChangeUiTheme`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeUiThemeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSettings(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/GetAllSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSetting(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/GetClientSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUiTheme(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/GetUiTheme`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllSettings(input?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Configuration/UpdateAllSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationApi - functional programming interface
 * @export
 */
export const ConfigurationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SiteUrlInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSiteUrl(input?: SiteUrlInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).changeSiteUrl(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ChangeUiThemeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUiTheme(input?: ChangeUiThemeInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).changeUiTheme(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSettings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SettingsEditOutput>> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).getAllSettings(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSetting(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientSettingDto> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).getClientSetting(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUiTheme(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SkinOutput> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).getUiTheme(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {any} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllSettings(input?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).updateAllSettings(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigurationApi - factory interface
 * @export
 */
export const ConfigurationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {SiteUrlInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSiteUrl(input?: SiteUrlInput, options?: any) {
            return ConfigurationApiFp(configuration).changeSiteUrl(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ChangeUiThemeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUiTheme(input?: ChangeUiThemeInput, options?: any) {
            return ConfigurationApiFp(configuration).changeUiTheme(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSettings(options?: any) {
            return ConfigurationApiFp(configuration).getAllSettings(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSetting(options?: any) {
            return ConfigurationApiFp(configuration).getClientSetting(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUiTheme(options?: any) {
            return ConfigurationApiFp(configuration).getUiTheme(options)(fetch, basePath);
        },
        /**
         * 
         * @param {any} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllSettings(input?: any, options?: any) {
            return ConfigurationApiFp(configuration).updateAllSettings(input, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
export class ConfigurationApi extends BaseAPI {
    /**
     * 
     * @param {SiteUrlInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public changeSiteUrl(input?: SiteUrlInput, options?: any) {
        return ConfigurationApiFp(this.configuration).changeSiteUrl(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ChangeUiThemeInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public changeUiTheme(input?: ChangeUiThemeInput, options?: any) {
        return ConfigurationApiFp(this.configuration).changeUiTheme(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public getAllSettings(options?: any) {
        return ConfigurationApiFp(this.configuration).getAllSettings(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public getClientSetting(options?: any) {
        return ConfigurationApiFp(this.configuration).getClientSetting(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public getUiTheme(options?: any) {
        return ConfigurationApiFp(this.configuration).getUiTheme(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {any} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public updateAllSettings(input?: any, options?: any) {
        return ConfigurationApiFp(this.configuration).updateAllSettings(input, options)(this.fetch, this.basePath);
    }

}

/**
 * DemoApi - fetch parameter creator
 * @export
 */
export const DemoApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateDemoDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentObject(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/CreateContentObject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options: any = {}): FetchArgs {
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling deleteBatch.');
            }
            const localVarPath = `/api/services/app/Demo/DeleteBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (value) {
                localVarQueryParameter['Value'] = value;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemo(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/GetDemo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(url?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/Test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateDemoDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Demo/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DemoApi - functional programming interface
 * @export
 */
export const DemoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListDemoDto> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentObject(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).createContentObject(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).deleteBatch(value, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListDemoDto> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoGetListDemoDto> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).getAll(filter, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GetDemoDto>> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).getDemo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(url?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).test(url, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListDemoDto> {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DemoApi - factory interface
 * @export
 */
export const DemoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return DemoApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateDemoDto, options?: any) {
            return DemoApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentObject(options?: any) {
            return DemoApiFp(configuration).createContentObject(options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any) {
            return DemoApiFp(configuration).deleteBatch(value, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return DemoApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return DemoApiFp(configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemo(options?: any) {
            return DemoApiFp(configuration).getDemo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(url?: string, options?: any) {
            return DemoApiFp(configuration).test(url, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateDemoDto, options?: any) {
            return DemoApiFp(configuration).update(input, options)(fetch, basePath);
        },
    };
};

/**
 * DemoApi - object-oriented interface
 * @export
 * @class DemoApi
 * @extends {BaseAPI}
 */
export class DemoApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public _delete(id?: number, options?: any) {
        return DemoApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateDemoDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public create(input?: CreateDemoDto, options?: any) {
        return DemoApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public createContentObject(options?: any) {
        return DemoApiFp(this.configuration).createContentObject(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<number>} value 数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public deleteBatch(value: Array<number>, options?: any) {
        return DemoApiFp(this.configuration).deleteBatch(value, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public get(id?: number, options?: any) {
        return DemoApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filter] 过滤条件
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return DemoApiFp(this.configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public getDemo(options?: any) {
        return DemoApiFp(this.configuration).getDemo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public test(url?: string, options?: any) {
        return DemoApiFp(this.configuration).test(url, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateDemoDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    public update(input?: UpdateDemoDto, options?: any) {
        return DemoApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

}

/**
 * DragVerificationApi - fetch parameter creator
 * @export
 */
export const DragVerificationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCode(input?: CheckCodeInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/DragVerification/CheckCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CheckCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDragVerificationCode(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/DragVerification/GetDragVerificationCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DragVerificationApi - functional programming interface
 * @export
 */
export const DragVerificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCode(input?: CheckCodeInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckCodeOutput> {
            const localVarFetchArgs = DragVerificationApiFetchParamCreator(configuration).checkCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDragVerificationCode(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DragVerificationDto> {
            const localVarFetchArgs = DragVerificationApiFetchParamCreator(configuration).getDragVerificationCode(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DragVerificationApi - factory interface
 * @export
 */
export const DragVerificationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CheckCodeInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCode(input?: CheckCodeInput, options?: any) {
            return DragVerificationApiFp(configuration).checkCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDragVerificationCode(options?: any) {
            return DragVerificationApiFp(configuration).getDragVerificationCode(options)(fetch, basePath);
        },
    };
};

/**
 * DragVerificationApi - object-oriented interface
 * @export
 * @class DragVerificationApi
 * @extends {BaseAPI}
 */
export class DragVerificationApi extends BaseAPI {
    /**
     * 
     * @param {CheckCodeInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    public checkCode(input?: CheckCodeInput, options?: any) {
        return DragVerificationApiFp(this.configuration).checkCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    public getDragVerificationCode(options?: any) {
        return DragVerificationApiFp(this.configuration).getDragVerificationCode(options)(this.fetch, this.basePath);
    }

}

/**
 * EnumApi - fetch parameter creator
 * @export
 */
export const EnumApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSCannedAccessControlList(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Enum/GetOSSCannedAccessControlList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSStorageClass(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Enum/GetOSSStorageClass`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Enum/GetProvinces`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserType(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Enum/GetUserType`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnumApi - functional programming interface
 * @export
 */
export const EnumApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSCannedAccessControlList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDtoInt32>> {
            const localVarFetchArgs = EnumApiFetchParamCreator(configuration).getOSSCannedAccessControlList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSStorageClass(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDtoInt32>> {
            const localVarFetchArgs = EnumApiFetchParamCreator(configuration).getOSSStorageClass(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDto>> {
            const localVarFetchArgs = EnumApiFetchParamCreator(configuration).getProvinces(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserType(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDtoInt32>> {
            const localVarFetchArgs = EnumApiFetchParamCreator(configuration).getUserType(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EnumApi - factory interface
 * @export
 */
export const EnumApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSCannedAccessControlList(options?: any) {
            return EnumApiFp(configuration).getOSSCannedAccessControlList(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOSSStorageClass(options?: any) {
            return EnumApiFp(configuration).getOSSStorageClass(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any) {
            return EnumApiFp(configuration).getProvinces(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserType(options?: any) {
            return EnumApiFp(configuration).getUserType(options)(fetch, basePath);
        },
    };
};

/**
 * EnumApi - object-oriented interface
 * @export
 * @class EnumApi
 * @extends {BaseAPI}
 */
export class EnumApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumApi
     */
    public getOSSCannedAccessControlList(options?: any) {
        return EnumApiFp(this.configuration).getOSSCannedAccessControlList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumApi
     */
    public getOSSStorageClass(options?: any) {
        return EnumApiFp(this.configuration).getOSSStorageClass(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumApi
     */
    public getProvinces(options?: any) {
        return EnumApiFp(this.configuration).getProvinces(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumApi
     */
    public getUserType(options?: any) {
        return EnumApiFp(this.configuration).getUserType(options)(this.fetch, this.basePath);
    }

}

/**
 * FileApi - fetch parameter creator
 * @export
 */
export const FileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [fileType] 
         * @param {string} [fileToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTempFile(fileName?: string, fileType?: string, fileToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/File/DownloadTempFile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (fileType !== undefined) {
                localVarQueryParameter['FileType'] = fileType;
            }

            if (fileToken !== undefined) {
                localVarQueryParameter['FileToken'] = fileToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [fileType] 
         * @param {string} [fileToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTempFile(fileName?: string, fileType?: string, fileToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileApiFetchParamCreator(configuration).downloadTempFile(fileName, fileType, fileToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [fileName] 
         * @param {string} [fileType] 
         * @param {string} [fileToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTempFile(fileName?: string, fileType?: string, fileToken?: string, options?: any) {
            return FileApiFp(configuration).downloadTempFile(fileName, fileType, fileToken, options)(fetch, basePath);
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @param {string} [fileName] 
     * @param {string} [fileType] 
     * @param {string} [fileToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadTempFile(fileName?: string, fileType?: string, fileToken?: string, options?: any) {
        return FileApiFp(this.configuration).downloadTempFile(fileName, fileType, fileToken, options)(this.fetch, this.basePath);
    }

}

/**
 * FileSettingDemoApi - fetch parameter creator
 * @export
 */
export const FileSettingDemoApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: GetFileSettingDemoDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GetFileSettingDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Get1`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {string} [sorting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(skipCount?: number, maxResultCount?: number, sorting?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(input?: SetFileSettingDemoDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Set`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SetFileSettingDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: GetFileSettingDemoDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/FileSettingDemo/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GetFileSettingDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileSettingDemoApi - functional programming interface
 * @export
 */
export const FileSettingDemoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: GetFileSettingDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetFileSettingDemoDto> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetFileSettingDemoDto> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetFileSettingDemoDto> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).get1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {string} [sorting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(skipCount?: number, maxResultCount?: number, sorting?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoGetFileSettingDemoDto> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).getAll(skipCount, maxResultCount, sorting, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(input?: SetFileSettingDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).set(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: GetFileSettingDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetFileSettingDemoDto> {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FileSettingDemoApi - factory interface
 * @export
 */
export const FileSettingDemoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return FileSettingDemoApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: GetFileSettingDemoDto, options?: any) {
            return FileSettingDemoApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return FileSettingDemoApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(options?: any) {
            return FileSettingDemoApiFp(configuration).get1(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {string} [sorting] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(skipCount?: number, maxResultCount?: number, sorting?: string, options?: any) {
            return FileSettingDemoApiFp(configuration).getAll(skipCount, maxResultCount, sorting, options)(fetch, basePath);
        },
        /**
         * 
         * @param {SetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(input?: SetFileSettingDemoDto, options?: any) {
            return FileSettingDemoApiFp(configuration).set(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {GetFileSettingDemoDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: GetFileSettingDemoDto, options?: any) {
            return FileSettingDemoApiFp(configuration).update(input, options)(fetch, basePath);
        },
    };
};

/**
 * FileSettingDemoApi - object-oriented interface
 * @export
 * @class FileSettingDemoApi
 * @extends {BaseAPI}
 */
export class FileSettingDemoApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public _delete(id?: number, options?: any) {
        return FileSettingDemoApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {GetFileSettingDemoDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public create(input?: GetFileSettingDemoDto, options?: any) {
        return FileSettingDemoApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public get(id?: number, options?: any) {
        return FileSettingDemoApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public get1(options?: any) {
        return FileSettingDemoApiFp(this.configuration).get1(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {string} [sorting] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public getAll(skipCount?: number, maxResultCount?: number, sorting?: string, options?: any) {
        return FileSettingDemoApiFp(this.configuration).getAll(skipCount, maxResultCount, sorting, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SetFileSettingDemoDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public set(input?: SetFileSettingDemoDto, options?: any) {
        return FileSettingDemoApiFp(this.configuration).set(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {GetFileSettingDemoDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    public update(input?: GetFileSettingDemoDto, options?: any) {
        return FileSettingDemoApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

}

/**
 * FriendshipApi - fetch parameter creator
 * @export
 */
export const FriendshipApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AcceptFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendshipRequest(input?: AcceptFriendshipRequestInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/AcceptFriendshipRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AcceptFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<CreateFriendshipRequestInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateFriendshipRequestAsync(input?: Array<CreateFriendshipRequestInput>, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/BatchCreateFriendshipRequestAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;CreateFriendshipRequestInput&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUser(input?: BlockUserInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/BlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BlockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequest(input?: CreateFriendshipRequestInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/CreateFriendshipRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateFriendshipRequestByUserNameInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequestByUserName(input?: CreateFriendshipRequestByUserNameInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/CreateFriendshipRequestByUserName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateFriendshipRequestByUserNameInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [maxResultCount] 每页数量
         * @param {number} [skipCount] 跳过数量
         * @param {string} [filter] 过滤条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreateFriendshipUserList(maxResultCount?: number, skipCount?: number, filter?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/GetCreateFriendshipUserList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnblockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUser(input?: UnblockUserInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Friendship/UnblockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnblockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendshipApi - functional programming interface
 * @export
 */
export const FriendshipApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AcceptFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendshipRequest(input?: AcceptFriendshipRequestInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).acceptFriendshipRequest(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<CreateFriendshipRequestInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateFriendshipRequestAsync(input?: Array<CreateFriendshipRequestInput>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FriendDto>> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).batchCreateFriendshipRequestAsync(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BlockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUser(input?: BlockUserInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).blockUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequest(input?: CreateFriendshipRequestInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FriendDto> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).createFriendshipRequest(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateFriendshipRequestByUserNameInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequestByUserName(input?: CreateFriendshipRequestByUserNameInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FriendDto> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).createFriendshipRequestByUserName(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [maxResultCount] 每页数量
         * @param {number} [skipCount] 跳过数量
         * @param {string} [filter] 过滤条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreateFriendshipUserList(maxResultCount?: number, skipCount?: number, filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoFirendshipUserDto> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).getCreateFriendshipUserList(maxResultCount, skipCount, filter, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnblockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUser(input?: UnblockUserInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).unblockUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FriendshipApi - factory interface
 * @export
 */
export const FriendshipApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {AcceptFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendshipRequest(input?: AcceptFriendshipRequestInput, options?: any) {
            return FriendshipApiFp(configuration).acceptFriendshipRequest(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<CreateFriendshipRequestInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchCreateFriendshipRequestAsync(input?: Array<CreateFriendshipRequestInput>, options?: any) {
            return FriendshipApiFp(configuration).batchCreateFriendshipRequestAsync(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BlockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUser(input?: BlockUserInput, options?: any) {
            return FriendshipApiFp(configuration).blockUser(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateFriendshipRequestInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequest(input?: CreateFriendshipRequestInput, options?: any) {
            return FriendshipApiFp(configuration).createFriendshipRequest(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateFriendshipRequestByUserNameInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendshipRequestByUserName(input?: CreateFriendshipRequestByUserNameInput, options?: any) {
            return FriendshipApiFp(configuration).createFriendshipRequestByUserName(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [maxResultCount] 每页数量
         * @param {number} [skipCount] 跳过数量
         * @param {string} [filter] 过滤条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreateFriendshipUserList(maxResultCount?: number, skipCount?: number, filter?: string, options?: any) {
            return FriendshipApiFp(configuration).getCreateFriendshipUserList(maxResultCount, skipCount, filter, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnblockUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUser(input?: UnblockUserInput, options?: any) {
            return FriendshipApiFp(configuration).unblockUser(input, options)(fetch, basePath);
        },
    };
};

/**
 * FriendshipApi - object-oriented interface
 * @export
 * @class FriendshipApi
 * @extends {BaseAPI}
 */
export class FriendshipApi extends BaseAPI {
    /**
     * 
     * @param {AcceptFriendshipRequestInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public acceptFriendshipRequest(input?: AcceptFriendshipRequestInput, options?: any) {
        return FriendshipApiFp(this.configuration).acceptFriendshipRequest(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<CreateFriendshipRequestInput>} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public batchCreateFriendshipRequestAsync(input?: Array<CreateFriendshipRequestInput>, options?: any) {
        return FriendshipApiFp(this.configuration).batchCreateFriendshipRequestAsync(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BlockUserInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public blockUser(input?: BlockUserInput, options?: any) {
        return FriendshipApiFp(this.configuration).blockUser(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateFriendshipRequestInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public createFriendshipRequest(input?: CreateFriendshipRequestInput, options?: any) {
        return FriendshipApiFp(this.configuration).createFriendshipRequest(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateFriendshipRequestByUserNameInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public createFriendshipRequestByUserName(input?: CreateFriendshipRequestByUserNameInput, options?: any) {
        return FriendshipApiFp(this.configuration).createFriendshipRequestByUserName(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [maxResultCount] 每页数量
     * @param {number} [skipCount] 跳过数量
     * @param {string} [filter] 过滤条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public getCreateFriendshipUserList(maxResultCount?: number, skipCount?: number, filter?: string, options?: any) {
        return FriendshipApiFp(this.configuration).getCreateFriendshipUserList(maxResultCount, skipCount, filter, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnblockUserInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    public unblockUser(input?: UnblockUserInput, options?: any) {
        return FriendshipApiFp(this.configuration).unblockUser(input, options)(this.fetch, this.basePath);
    }

}

/**
 * GeetestApi - fetch parameter creator
 * @export
 */
export const GeetestApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GeetestAppCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPCheck(input?: GeetestAppCheckInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Geetest/APPCheck`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GeetestAppCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPGetCaptcha(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Geetest/APPGetCaptcha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GeetestCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(input?: GeetestCheckInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Geetest/Check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GeetestCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Geetest/GetCaptcha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeetestApi - functional programming interface
 * @export
 */
export const GeetestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GeetestAppCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPCheck(input?: GeetestAppCheckInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).aPPCheck(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPGetCaptcha(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GeetestCheckOutput> {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).aPPGetCaptcha(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {GeetestCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(input?: GeetestCheckInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckCodeOutput> {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).check(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).getCaptcha(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GeetestApi - factory interface
 * @export
 */
export const GeetestApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {GeetestAppCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPCheck(input?: GeetestAppCheckInput, options?: any) {
            return GeetestApiFp(configuration).aPPCheck(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPPGetCaptcha(options?: any) {
            return GeetestApiFp(configuration).aPPGetCaptcha(options)(fetch, basePath);
        },
        /**
         * 
         * @param {GeetestCheckInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(input?: GeetestCheckInput, options?: any) {
            return GeetestApiFp(configuration).check(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptcha(options?: any) {
            return GeetestApiFp(configuration).getCaptcha(options)(fetch, basePath);
        },
    };
};

/**
 * GeetestApi - object-oriented interface
 * @export
 * @class GeetestApi
 * @extends {BaseAPI}
 */
export class GeetestApi extends BaseAPI {
    /**
     * 
     * @param {GeetestAppCheckInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    public aPPCheck(input?: GeetestAppCheckInput, options?: any) {
        return GeetestApiFp(this.configuration).aPPCheck(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    public aPPGetCaptcha(options?: any) {
        return GeetestApiFp(this.configuration).aPPGetCaptcha(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {GeetestCheckInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    public check(input?: GeetestCheckInput, options?: any) {
        return GeetestApiFp(this.configuration).check(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    public getCaptcha(options?: any) {
        return GeetestApiFp(this.configuration).getCaptcha(options)(this.fetch, this.basePath);
    }

}

/**
 * IdentityApi - fetch parameter creator
 * @export
 */
export const IdentityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options: any = {}): FetchArgs {
            const localVarPath = `/api/Identity/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = IdentityApiFetchParamCreator(configuration).get(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any) {
            return IdentityApiFp(configuration).get(options)(fetch, basePath);
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public get(options?: any) {
        return IdentityApiFp(this.configuration).get(options)(this.fetch, this.basePath);
    }

}

/**
 * InterfaceExportApi - fetch parameter creator
 * @export
 */
export const InterfaceExportApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReactDownloadUrl(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/InterfaceExport/GetReactDownloadUrl`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InterfaceExportApi - functional programming interface
 * @export
 */
export const InterfaceExportApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReactDownloadUrl(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = InterfaceExportApiFetchParamCreator(configuration).getReactDownloadUrl(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InterfaceExportApi - factory interface
 * @export
 */
export const InterfaceExportApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReactDownloadUrl(options?: any) {
            return InterfaceExportApiFp(configuration).getReactDownloadUrl(options)(fetch, basePath);
        },
    };
};

/**
 * InterfaceExportApi - object-oriented interface
 * @export
 * @class InterfaceExportApi
 * @extends {BaseAPI}
 */
export class InterfaceExportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterfaceExportApi
     */
    public getReactDownloadUrl(options?: any) {
        return InterfaceExportApiFp(this.configuration).getReactDownloadUrl(options)(this.fetch, this.basePath);
    }

}

/**
 * LuceneNetApi - fetch parameter creator
 * @export
 */
export const LuceneNetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initIndex(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/LuceneNet/InitIndex`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show(field?: string, keyword?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/LuceneNet/Show`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (field !== undefined) {
                localVarQueryParameter['field'] = field;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<MultiFieldInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAdvanced(input?: Array<MultiFieldInput>, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/LuceneNet/ShowAdvanced`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;MultiFieldInput&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFields(field?: Array<string>, keyword?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/LuceneNet/ShowFields`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;string&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(field || {}) : (field || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LuceneNetApi - functional programming interface
 * @export
 */
export const LuceneNetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initIndex(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LuceneNetApiFetchParamCreator(configuration).initIndex(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show(field?: string, keyword?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LuceneNetApiFetchParamCreator(configuration).show(field, keyword, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<MultiFieldInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAdvanced(input?: Array<MultiFieldInput>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LuceneNetApiFetchParamCreator(configuration).showAdvanced(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<string>} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFields(field?: Array<string>, keyword?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LuceneNetApiFetchParamCreator(configuration).showFields(field, keyword, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LuceneNetApi - factory interface
 * @export
 */
export const LuceneNetApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initIndex(options?: any) {
            return LuceneNetApiFp(configuration).initIndex(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show(field?: string, keyword?: string, options?: any) {
            return LuceneNetApiFp(configuration).show(field, keyword, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<MultiFieldInput>} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAdvanced(input?: Array<MultiFieldInput>, options?: any) {
            return LuceneNetApiFp(configuration).showAdvanced(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<string>} [field] 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFields(field?: Array<string>, keyword?: string, options?: any) {
            return LuceneNetApiFp(configuration).showFields(field, keyword, options)(fetch, basePath);
        },
    };
};

/**
 * LuceneNetApi - object-oriented interface
 * @export
 * @class LuceneNetApi
 * @extends {BaseAPI}
 */
export class LuceneNetApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LuceneNetApi
     */
    public initIndex(options?: any) {
        return LuceneNetApiFp(this.configuration).initIndex(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [field] 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LuceneNetApi
     */
    public show(field?: string, keyword?: string, options?: any) {
        return LuceneNetApiFp(this.configuration).show(field, keyword, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<MultiFieldInput>} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LuceneNetApi
     */
    public showAdvanced(input?: Array<MultiFieldInput>, options?: any) {
        return LuceneNetApiFp(this.configuration).showAdvanced(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<string>} [field] 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LuceneNetApi
     */
    public showFields(field?: Array<string>, keyword?: string, options?: any) {
        return LuceneNetApiFp(this.configuration).showFields(field, keyword, options)(this.fetch, this.basePath);
    }

}

/**
 * MenuApi - fetch parameter creator
 * @export
 */
export const MenuApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomMenu(input?: CreateMenuInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/CreateCustomMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemMenu(input?: CreateMenuInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/CreateSystemMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除菜单
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/DeleteMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMenus(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/GetAllMenus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMenus(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/GetUserMenus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移动菜单
         * @param {MoveMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveMenu(input?: MoveMenuInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/MoveMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MoveMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新菜单
         * @param {UpdateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu(input?: UpdateMenuInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Menu/UpdateMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomMenu(input?: CreateMenuInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MenuDto> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).createCustomMenu(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemMenu(input?: CreateMenuInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MenuDto> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).createSystemMenu(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除菜单
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).deleteMenu(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMenus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MenuDto>> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).getAllMenus(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMenus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserMenuItem>> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).getUserMenus(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 移动菜单
         * @param {MoveMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveMenu(input?: MoveMenuInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MenuDto> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).moveMenu(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新菜单
         * @param {UpdateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu(input?: UpdateMenuInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MenuDto> {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).updateMenu(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomMenu(input?: CreateMenuInput, options?: any) {
            return MenuApiFp(configuration).createCustomMenu(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSystemMenu(input?: CreateMenuInput, options?: any) {
            return MenuApiFp(configuration).createSystemMenu(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除菜单
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMenu(id?: number, options?: any) {
            return MenuApiFp(configuration).deleteMenu(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMenus(options?: any) {
            return MenuApiFp(configuration).getAllMenus(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取菜单及权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMenus(options?: any) {
            return MenuApiFp(configuration).getUserMenus(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 移动菜单
         * @param {MoveMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveMenu(input?: MoveMenuInput, options?: any) {
            return MenuApiFp(configuration).moveMenu(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新菜单
         * @param {UpdateMenuInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMenu(input?: UpdateMenuInput, options?: any) {
            return MenuApiFp(configuration).updateMenu(input, options)(fetch, basePath);
        },
    };
};

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @summary 创建用户自定义菜单
     * @param {CreateMenuInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public createCustomMenu(input?: CreateMenuInput, options?: any) {
        return MenuApiFp(this.configuration).createCustomMenu(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 创建系统菜单，开发人员使用
     * @param {CreateMenuInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public createSystemMenu(input?: CreateMenuInput, options?: any) {
        return MenuApiFp(this.configuration).createSystemMenu(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除菜单
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public deleteMenu(id?: number, options?: any) {
        return MenuApiFp(this.configuration).deleteMenu(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取菜单及权限
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public getAllMenus(options?: any) {
        return MenuApiFp(this.configuration).getAllMenus(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取菜单及权限
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public getUserMenus(options?: any) {
        return MenuApiFp(this.configuration).getUserMenus(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 移动菜单
     * @param {MoveMenuInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public moveMenu(input?: MoveMenuInput, options?: any) {
        return MenuApiFp(this.configuration).moveMenu(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新菜单
     * @param {UpdateMenuInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public updateMenu(input?: UpdateMenuInput, options?: any) {
        return MenuApiFp(this.configuration).updateMenu(input, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationApi - fetch parameter creator
 * @export
 */
export const NotificationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationSettings(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Notification/GetNotificationSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {0 | 1} [state] 
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotifications(state?: 0 | 1, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Notification/GetUserNotifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['State'] = state;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllNotificationsAsRead(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Notification/SetAllNotificationsAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntityDtoGuid} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNotificationAsRead(input?: EntityDtoGuid, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Notification/SetNotificationAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityDtoGuid" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateNotificationSettingsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettings(input?: UpdateNotificationSettingsInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Notification/UpdateNotificationSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateNotificationSettingsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationSettings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetNotificationSettingsOutput> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).getNotificationSettings(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {0 | 1} [state] 
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotifications(state?: 0 | 1, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetNotificationsOutput> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).getUserNotifications(state, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllNotificationsAsRead(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).setAllNotificationsAsRead(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EntityDtoGuid} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNotificationAsRead(input?: EntityDtoGuid, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).setNotificationAsRead(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateNotificationSettingsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettings(input?: UpdateNotificationSettingsInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).updateNotificationSettings(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationSettings(options?: any) {
            return NotificationApiFp(configuration).getNotificationSettings(options)(fetch, basePath);
        },
        /**
         * 
         * @param {0 | 1} [state] 
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotifications(state?: 0 | 1, maxResultCount?: number, skipCount?: number, options?: any) {
            return NotificationApiFp(configuration).getUserNotifications(state, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAllNotificationsAsRead(options?: any) {
            return NotificationApiFp(configuration).setAllNotificationsAsRead(options)(fetch, basePath);
        },
        /**
         * 
         * @param {EntityDtoGuid} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNotificationAsRead(input?: EntityDtoGuid, options?: any) {
            return NotificationApiFp(configuration).setNotificationAsRead(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateNotificationSettingsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettings(input?: UpdateNotificationSettingsInput, options?: any) {
            return NotificationApiFp(configuration).updateNotificationSettings(input, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public getNotificationSettings(options?: any) {
        return NotificationApiFp(this.configuration).getNotificationSettings(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {0 | 1} [state] 
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public getUserNotifications(state?: 0 | 1, maxResultCount?: number, skipCount?: number, options?: any) {
        return NotificationApiFp(this.configuration).getUserNotifications(state, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public setAllNotificationsAsRead(options?: any) {
        return NotificationApiFp(this.configuration).setAllNotificationsAsRead(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EntityDtoGuid} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public setNotificationAsRead(input?: EntityDtoGuid, options?: any) {
        return NotificationApiFp(this.configuration).setNotificationAsRead(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateNotificationSettingsInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public updateNotificationSettings(input?: UpdateNotificationSettingsInput, options?: any) {
        return NotificationApiFp(this.configuration).updateNotificationSettings(input, options)(this.fetch, this.basePath);
    }

}

/**
 * OSSObjectApi - fetch parameter creator
 * @export
 */
export const OSSObjectApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [bucketName] 库名
         * @param {string} [name] 文件名
         * @param {Array<string>} [tagNames] 标签名
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sysFunName] 系统功能
         * @param {string} [group] 本文相关 （与BucketName条件不兼容，Group优先）
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(bucketName?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sysFunName?: string, group?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OSSObject/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bucketName !== undefined) {
                localVarQueryParameter['BucketName'] = bucketName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (tagNames) {
                localVarQueryParameter['TagNames'] = tagNames;
            }

            if (extensionNames) {
                localVarQueryParameter['ExtensionNames'] = extensionNames;
            }

            if (sysFunName !== undefined) {
                localVarQueryParameter['SysFunName'] = sysFunName;
            }

            if (group !== undefined) {
                localVarQueryParameter['Group'] = group;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用作下拉列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketList(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OSSObject/GetBucketList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OSSObjectApi - functional programming interface
 * @export
 */
export const OSSObjectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [bucketName] 库名
         * @param {string} [name] 文件名
         * @param {Array<string>} [tagNames] 标签名
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sysFunName] 系统功能
         * @param {string} [group] 本文相关 （与BucketName条件不兼容，Group优先）
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(bucketName?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sysFunName?: string, group?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoOSSObjectDto> {
            const localVarFetchArgs = OSSObjectApiFetchParamCreator(configuration).getAll(bucketName, name, tagNames, extensionNames, sysFunName, group, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用作下拉列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDto>> {
            const localVarFetchArgs = OSSObjectApiFetchParamCreator(configuration).getBucketList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OSSObjectApi - factory interface
 * @export
 */
export const OSSObjectApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [bucketName] 库名
         * @param {string} [name] 文件名
         * @param {Array<string>} [tagNames] 标签名
         * @param {Array<string>} [extensionNames] 扩展名
         * @param {string} [sysFunName] 系统功能
         * @param {string} [group] 本文相关 （与BucketName条件不兼容，Group优先）
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(bucketName?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sysFunName?: string, group?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return OSSObjectApiFp(configuration).getAll(bucketName, name, tagNames, extensionNames, sysFunName, group, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用作下拉列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketList(options?: any) {
            return OSSObjectApiFp(configuration).getBucketList(options)(fetch, basePath);
        },
    };
};

/**
 * OSSObjectApi - object-oriented interface
 * @export
 * @class OSSObjectApi
 * @extends {BaseAPI}
 */
export class OSSObjectApi extends BaseAPI {
    /**
     * 
     * @param {string} [bucketName] 库名
     * @param {string} [name] 文件名
     * @param {Array<string>} [tagNames] 标签名
     * @param {Array<string>} [extensionNames] 扩展名
     * @param {string} [sysFunName] 系统功能
     * @param {string} [group] 本文相关 （与BucketName条件不兼容，Group优先）
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSObjectApi
     */
    public getAll(bucketName?: string, name?: string, tagNames?: Array<string>, extensionNames?: Array<string>, sysFunName?: string, group?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return OSSObjectApiFp(this.configuration).getAll(bucketName, name, tagNames, extensionNames, sysFunName, group, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用作下拉列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSObjectApi
     */
    public getBucketList(options?: any) {
        return OSSObjectApiFp(this.configuration).getBucketList(options)(this.fetch, this.basePath);
    }

}

/**
 * OSSSettingConfigurationServiceApi - fetch parameter creator
 * @export
 */
export const OSSSettingConfigurationServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OSSSettingConfigurationService/GetSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OSSSettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: OSSSettingDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OSSSettingConfigurationService/SetSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OSSSettingDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OSSSettingConfigurationServiceApi - functional programming interface
 * @export
 */
export const OSSSettingConfigurationServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SettingsEditOutput> {
            const localVarFetchArgs = OSSSettingConfigurationServiceApiFetchParamCreator(configuration).getSetting(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {OSSSettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: OSSSettingDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OSSSettingConfigurationServiceApiFetchParamCreator(configuration).setSetting(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OSSSettingConfigurationServiceApi - factory interface
 * @export
 */
export const OSSSettingConfigurationServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options?: any) {
            return OSSSettingConfigurationServiceApiFp(configuration).getSetting(options)(fetch, basePath);
        },
        /**
         * 
         * @param {OSSSettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: OSSSettingDto, options?: any) {
            return OSSSettingConfigurationServiceApiFp(configuration).setSetting(input, options)(fetch, basePath);
        },
    };
};

/**
 * OSSSettingConfigurationServiceApi - object-oriented interface
 * @export
 * @class OSSSettingConfigurationServiceApi
 * @extends {BaseAPI}
 */
export class OSSSettingConfigurationServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSSettingConfigurationServiceApi
     */
    public getSetting(options?: any) {
        return OSSSettingConfigurationServiceApiFp(this.configuration).getSetting(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {OSSSettingDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSSettingConfigurationServiceApi
     */
    public setSetting(input?: OSSSettingDto, options?: any) {
        return OSSSettingConfigurationServiceApiFp(this.configuration).setSetting(input, options)(this.fetch, this.basePath);
    }

}

/**
 * OrganizationUnitApi - fetch parameter creator
 * @export
 */
export const OrganizationUnitApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToOrganizationUnit(input?: UsersToOrganizationUnitInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/AddUserToOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UsersToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit(input?: CreateOrganizationUnitInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/CreateOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除组织机构
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/DeleteOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取可加入某组织单元的所有人员
         * @param {number} [id] 组织机构Id
         * @param {string} [filter] 按名称过滤
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitJoinableUserList(id?: number, filter?: string, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/GetOrganizationUnitJoinableUserList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取组织机构下的所有人员
         * @param {number} [id] ����ID
         * @param {boolean} [isRecursiveSearch] �Ƿ�ݹ�����¼���������
         * @param {string} [nameFilter] �û����ƹ�������
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitUsers(id?: number, isRecursiveSearch?: boolean, nameFilter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/GetOrganizationUnitUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (isRecursiveSearch !== undefined) {
                localVarQueryParameter['IsRecursiveSearch'] = isRecursiveSearch;
            }

            if (nameFilter !== undefined) {
                localVarQueryParameter['NameFilter'] = nameFilter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取组织机构树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnits(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/GetOrganizationUnits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户所在组织机构
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizationUnits(userId?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/GetUserOrganizationUnits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInOrganizationUnit(input?: UserToOrganizationUnitInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/IsInOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveOrganizationUnit(input?: MoveOrganizationUnitInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/MoveOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MoveOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOrganizationUnit(userId?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/RemoveAllOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 从组织机构中移除用户
         * @param {string} [userIdListStr] �û�ID
         * @param {number} [organizationUnitId] ��֯����ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromOrganizationUnit(userIdListStr?: string, organizationUnitId?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userIdListStr !== undefined) {
                localVarQueryParameter['UserIdListStr'] = userIdListStr;
            }

            if (organizationUnitId !== undefined) {
                localVarQueryParameter['OrganizationUnitId'] = organizationUnitId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit(input?: UpdateOrganizationUnitInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/OrganizationUnit/UpdateOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationUnitApi - functional programming interface
 * @export
 */
export const OrganizationUnitApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToOrganizationUnit(input?: UsersToOrganizationUnitInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).addUserToOrganizationUnit(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit(input?: CreateOrganizationUnitInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationUnitDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).createOrganizationUnit(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除组织机构
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).deleteOrganizationUnit(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取可加入某组织单元的所有人员
         * @param {number} [id] 组织机构Id
         * @param {string} [filter] 按名称过滤
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitJoinableUserList(id?: number, filter?: string, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoOrganizationUnitUserDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).getOrganizationUnitJoinableUserList(id, filter, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取组织机构下的所有人员
         * @param {number} [id] ����ID
         * @param {boolean} [isRecursiveSearch] �Ƿ�ݹ�����¼���������
         * @param {string} [nameFilter] �û����ƹ�������
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitUsers(id?: number, isRecursiveSearch?: boolean, nameFilter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoOrganizationUnitUserListDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).getOrganizationUnitUsers(id, isRecursiveSearch, nameFilter, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取组织机构树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnits(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoOrganizationUnitDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).getOrganizationUnits(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户所在组织机构
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizationUnits(userId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<number>> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).getUserOrganizationUnits(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInOrganizationUnit(input?: UserToOrganizationUnitInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).isInOrganizationUnit(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveOrganizationUnit(input?: MoveOrganizationUnitInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationUnitDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).moveOrganizationUnit(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOrganizationUnit(userId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).removeAllOrganizationUnit(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 从组织机构中移除用户
         * @param {string} [userIdListStr] �û�ID
         * @param {number} [organizationUnitId] ��֯����ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromOrganizationUnit(userIdListStr?: string, organizationUnitId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).removeUserFromOrganizationUnit(userIdListStr, organizationUnitId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit(input?: UpdateOrganizationUnitInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrganizationUnitDto> {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).updateOrganizationUnit(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrganizationUnitApi - factory interface
 * @export
 */
export const OrganizationUnitApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToOrganizationUnit(input?: UsersToOrganizationUnitInput, options?: any) {
            return OrganizationUnitApiFp(configuration).addUserToOrganizationUnit(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationUnit(input?: CreateOrganizationUnitInput, options?: any) {
            return OrganizationUnitApiFp(configuration).createOrganizationUnit(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除组织机构
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationUnit(id?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).deleteOrganizationUnit(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取可加入某组织单元的所有人员
         * @param {number} [id] 组织机构Id
         * @param {string} [filter] 按名称过滤
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitJoinableUserList(id?: number, filter?: string, skipCount?: number, maxResultCount?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).getOrganizationUnitJoinableUserList(id, filter, skipCount, maxResultCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取组织机构下的所有人员
         * @param {number} [id] ����ID
         * @param {boolean} [isRecursiveSearch] �Ƿ�ݹ�����¼���������
         * @param {string} [nameFilter] �û����ƹ�������
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnitUsers(id?: number, isRecursiveSearch?: boolean, nameFilter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).getOrganizationUnitUsers(id, isRecursiveSearch, nameFilter, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取组织机构树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUnits(options?: any) {
            return OrganizationUnitApiFp(configuration).getOrganizationUnits(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户所在组织机构
         * @param {number} [userId] 用户ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizationUnits(userId?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).getUserOrganizationUnits(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInOrganizationUnit(input?: UserToOrganizationUnitInput, options?: any) {
            return OrganizationUnitApiFp(configuration).isInOrganizationUnit(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveOrganizationUnit(input?: MoveOrganizationUnitInput, options?: any) {
            return OrganizationUnitApiFp(configuration).moveOrganizationUnit(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllOrganizationUnit(userId?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).removeAllOrganizationUnit(userId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 从组织机构中移除用户
         * @param {string} [userIdListStr] �û�ID
         * @param {number} [organizationUnitId] ��֯����ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromOrganizationUnit(userIdListStr?: string, organizationUnitId?: number, options?: any) {
            return OrganizationUnitApiFp(configuration).removeUserFromOrganizationUnit(userIdListStr, organizationUnitId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationUnit(input?: UpdateOrganizationUnitInput, options?: any) {
            return OrganizationUnitApiFp(configuration).updateOrganizationUnit(input, options)(fetch, basePath);
        },
    };
};

/**
 * OrganizationUnitApi - object-oriented interface
 * @export
 * @class OrganizationUnitApi
 * @extends {BaseAPI}
 */
export class OrganizationUnitApi extends BaseAPI {
    /**
     * 
     * @summary 将用户添加到组织机构中
     * @param {UsersToOrganizationUnitInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public addUserToOrganizationUnit(input?: UsersToOrganizationUnitInput, options?: any) {
        return OrganizationUnitApiFp(this.configuration).addUserToOrganizationUnit(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 创建组织机构
     * @param {CreateOrganizationUnitInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public createOrganizationUnit(input?: CreateOrganizationUnitInput, options?: any) {
        return OrganizationUnitApiFp(this.configuration).createOrganizationUnit(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除组织机构
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public deleteOrganizationUnit(id?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).deleteOrganizationUnit(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取可加入某组织单元的所有人员
     * @param {number} [id] 组织机构Id
     * @param {string} [filter] 按名称过滤
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public getOrganizationUnitJoinableUserList(id?: number, filter?: string, skipCount?: number, maxResultCount?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).getOrganizationUnitJoinableUserList(id, filter, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取组织机构下的所有人员
     * @param {number} [id] ����ID
     * @param {boolean} [isRecursiveSearch] �Ƿ�ݹ�����¼���������
     * @param {string} [nameFilter] �û����ƹ�������
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public getOrganizationUnitUsers(id?: number, isRecursiveSearch?: boolean, nameFilter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).getOrganizationUnitUsers(id, isRecursiveSearch, nameFilter, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取组织机构树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public getOrganizationUnits(options?: any) {
        return OrganizationUnitApiFp(this.configuration).getOrganizationUnits(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户所在组织机构
     * @param {number} [userId] 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public getUserOrganizationUnits(userId?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).getUserOrganizationUnits(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户是否属于组织机构
     * @param {UserToOrganizationUnitInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public isInOrganizationUnit(input?: UserToOrganizationUnitInput, options?: any) {
        return OrganizationUnitApiFp(this.configuration).isInOrganizationUnit(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 移动组织机构
     * @param {MoveOrganizationUnitInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public moveOrganizationUnit(input?: MoveOrganizationUnitInput, options?: any) {
        return OrganizationUnitApiFp(this.configuration).moveOrganizationUnit(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public removeAllOrganizationUnit(userId?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).removeAllOrganizationUnit(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 从组织机构中移除用户
     * @param {string} [userIdListStr] �û�ID
     * @param {number} [organizationUnitId] ��֯����ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public removeUserFromOrganizationUnit(userIdListStr?: string, organizationUnitId?: number, options?: any) {
        return OrganizationUnitApiFp(this.configuration).removeUserFromOrganizationUnit(userIdListStr, organizationUnitId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改组织机构信息
     * @param {UpdateOrganizationUnitInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    public updateOrganizationUnit(input?: UpdateOrganizationUnitInput, options?: any) {
        return OrganizationUnitApiFp(this.configuration).updateOrganizationUnit(input, options)(this.fetch, this.basePath);
    }

}

/**
 * OssAppApi - fetch parameter creator
 * @export
 */
export const OssAppApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建本文相关的对象
         * @param {string} [group] 第一次不用带，第二次需要带
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObjectRelatedToThisArticle(group?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/OssApp/CreateObjectRelatedToThisArticle`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OssAppApi - functional programming interface
 * @export
 */
export const OssAppApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建本文相关的对象
         * @param {string} [group] 第一次不用带，第二次需要带
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObjectRelatedToThisArticle(group?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupFileDto> {
            const localVarFetchArgs = OssAppApiFetchParamCreator(configuration).createObjectRelatedToThisArticle(group, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OssAppApi - factory interface
 * @export
 */
export const OssAppApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 创建本文相关的对象
         * @param {string} [group] 第一次不用带，第二次需要带
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObjectRelatedToThisArticle(group?: string, options?: any) {
            return OssAppApiFp(configuration).createObjectRelatedToThisArticle(group, options)(fetch, basePath);
        },
    };
};

/**
 * OssAppApi - object-oriented interface
 * @export
 * @class OssAppApi
 * @extends {BaseAPI}
 */
export class OssAppApi extends BaseAPI {
    /**
     * 
     * @summary 创建本文相关的对象
     * @param {string} [group] 第一次不用带，第二次需要带
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OssAppApi
     */
    public createObjectRelatedToThisArticle(group?: string, options?: any) {
        return OssAppApiFp(this.configuration).createObjectRelatedToThisArticle(group, options)(this.fetch, this.basePath);
    }

}

/**
 * PermissionApi - fetch parameter creator
 * @export
 */
export const PermissionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissionTree(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Permission/GetAllPermissionTree`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Permission/GetAllPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Permission/GetUserPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissionTree(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PermissionViewDto>> {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).getAllPermissionTree(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取所有权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoFlatPermissionWithLevelDto> {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).getAllPermissions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).getUserPermissions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取权限树
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissionTree(options?: any) {
            return PermissionApiFp(configuration).getAllPermissionTree(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取所有权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: any) {
            return PermissionApiFp(configuration).getAllPermissions(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions(options?: any) {
            return PermissionApiFp(configuration).getUserPermissions(options)(fetch, basePath);
        },
    };
};

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * 
     * @summary 获取权限树
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public getAllPermissionTree(options?: any) {
        return PermissionApiFp(this.configuration).getAllPermissionTree(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取所有权限
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public getAllPermissions(options?: any) {
        return PermissionApiFp(this.configuration).getAllPermissions(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public getUserPermissions(options?: any) {
        return PermissionApiFp(this.configuration).getUserPermissions(options)(this.fetch, this.basePath);
    }

}

/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export const ProfileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/ChangePassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangePasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeUserPasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(input?: ChangeUserPasswordInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/ChangeUserPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeUserPasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserProfileForEdit(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/GetCurrentUserProfileForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordComplexitySetting(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/GetPasswordComplexitySetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(input?: EntityDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/ResetUserPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CurrentUserProfileEditDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserProfile(input?: CurrentUserProfileEditDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/UpdateCurrentUserProfile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CurrentUserProfileEditDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfilePictureInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePicture(input?: UpdateProfilePictureInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Profile/UpdateProfilePicture`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateProfilePictureInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).changePassword(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ChangeUserPasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(input?: ChangeUserPasswordInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).changeUserPassword(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserProfileForEdit(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CurrentUserProfileEditDto> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).getCurrentUserProfileForEdit(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordComplexitySetting(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPasswordComplexitySettingOutput> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).getPasswordComplexitySetting(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(input?: EntityDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).resetUserPassword(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CurrentUserProfileEditDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserProfile(input?: CurrentUserProfileEditDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).updateCurrentUserProfile(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateProfilePictureInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePicture(input?: UpdateProfilePictureInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).updateProfilePicture(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ChangePasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordInput, options?: any) {
            return ProfileApiFp(configuration).changePassword(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ChangeUserPasswordInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPassword(input?: ChangeUserPasswordInput, options?: any) {
            return ProfileApiFp(configuration).changeUserPassword(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserProfileForEdit(options?: any) {
            return ProfileApiFp(configuration).getCurrentUserProfileForEdit(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordComplexitySetting(options?: any) {
            return ProfileApiFp(configuration).getPasswordComplexitySetting(options)(fetch, basePath);
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPassword(input?: EntityDtoInt64, options?: any) {
            return ProfileApiFp(configuration).resetUserPassword(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CurrentUserProfileEditDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserProfile(input?: CurrentUserProfileEditDto, options?: any) {
            return ProfileApiFp(configuration).updateCurrentUserProfile(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateProfilePictureInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePicture(input?: UpdateProfilePictureInput, options?: any) {
            return ProfileApiFp(configuration).updateProfilePicture(input, options)(fetch, basePath);
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public changePassword(input?: ChangePasswordInput, options?: any) {
        return ProfileApiFp(this.configuration).changePassword(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ChangeUserPasswordInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public changeUserPassword(input?: ChangeUserPasswordInput, options?: any) {
        return ProfileApiFp(this.configuration).changeUserPassword(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getCurrentUserProfileForEdit(options?: any) {
        return ProfileApiFp(this.configuration).getCurrentUserProfileForEdit(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getPasswordComplexitySetting(options?: any) {
        return ProfileApiFp(this.configuration).getPasswordComplexitySetting(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EntityDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public resetUserPassword(input?: EntityDtoInt64, options?: any) {
        return ProfileApiFp(this.configuration).resetUserPassword(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CurrentUserProfileEditDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public updateCurrentUserProfile(input?: CurrentUserProfileEditDto, options?: any) {
        return ProfileApiFp(this.configuration).updateCurrentUserProfile(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateProfilePictureInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public updateProfilePicture(input?: UpdateProfilePictureInput, options?: any) {
        return ProfileApiFp(this.configuration).updateProfilePicture(input, options)(this.fetch, this.basePath);
    }

}

/**
 * QRLoginApi - fetch parameter creator
 * @export
 */
export const QRLoginApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmLogin(connectionId: string, token: string, options: any = {}): FetchArgs {
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError('connectionId','Required parameter connectionId was null or undefined when calling confirmLogin.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling confirmLogin.');
            }
            const localVarPath = `/api/QRLogin/ConfirmLogin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (connectionId !== undefined) {
                localVarQueryParameter['ConnectionId'] = connectionId;
            }

            if (token !== undefined) {
                localVarQueryParameter['Token'] = token;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(token?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/QRLogin/Login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanQRCode(connectionId: string, token: string, options: any = {}): FetchArgs {
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError('connectionId','Required parameter connectionId was null or undefined when calling scanQRCode.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling scanQRCode.');
            }
            const localVarPath = `/api/QRLogin/ScanQRCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (connectionId !== undefined) {
                localVarQueryParameter['ConnectionId'] = connectionId;
            }

            if (token !== undefined) {
                localVarQueryParameter['Token'] = token;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QRLoginApi - functional programming interface
 * @export
 */
export const QRLoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmLogin(connectionId: string, token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = QRLoginApiFetchParamCreator(configuration).confirmLogin(connectionId, token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(token?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AuthenticateResultModel> {
            const localVarFetchArgs = QRLoginApiFetchParamCreator(configuration).login(token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanQRCode(connectionId: string, token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = QRLoginApiFetchParamCreator(configuration).scanQRCode(connectionId, token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * QRLoginApi - factory interface
 * @export
 */
export const QRLoginApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmLogin(connectionId: string, token: string, options?: any) {
            return QRLoginApiFp(configuration).confirmLogin(connectionId, token, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(token?: string, options?: any) {
            return QRLoginApiFp(configuration).login(token, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} connectionId 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanQRCode(connectionId: string, token: string, options?: any) {
            return QRLoginApiFp(configuration).scanQRCode(connectionId, token, options)(fetch, basePath);
        },
    };
};

/**
 * QRLoginApi - object-oriented interface
 * @export
 * @class QRLoginApi
 * @extends {BaseAPI}
 */
export class QRLoginApi extends BaseAPI {
    /**
     * 
     * @param {string} connectionId 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRLoginApi
     */
    public confirmLogin(connectionId: string, token: string, options?: any) {
        return QRLoginApiFp(this.configuration).confirmLogin(connectionId, token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRLoginApi
     */
    public login(token?: string, options?: any) {
        return QRLoginApiFp(this.configuration).login(token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} connectionId 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QRLoginApi
     */
    public scanQRCode(connectionId: string, token: string, options?: any) {
        return QRLoginApiFp(this.configuration).scanQRCode(connectionId, token, options)(this.fetch, this.basePath);
    }

}

/**
 * RegisterApi - fetch parameter creator
 * @export
 */
export const RegisterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 注册
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByEmail(input?: RegisterByEmailInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/RegisterByEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByPhoneNumber(input?: RegisterByPhoneNumberInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/RegisterByPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOnlyPhoneNumber(input?: RegisterOnlyPhoneNumberInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/RegisterOnlyPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterOnlyPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/SendEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Register/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 注册
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterOutput> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).register(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByEmail(input?: RegisterByEmailInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterOutput> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).registerByEmail(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByPhoneNumber(input?: RegisterByPhoneNumberInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterOutput> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).registerByPhoneNumber(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOnlyPhoneNumber(input?: RegisterOnlyPhoneNumberInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterOutput> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).registerOnlyPhoneNumber(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).sendEmailCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).sendPhoneNumberCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 注册
         * @param {RegisterInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(input?: RegisterInput, options?: any) {
            return RegisterApiFp(configuration).register(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByEmail(input?: RegisterByEmailInput, options?: any) {
            return RegisterApiFp(configuration).registerByEmail(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerByPhoneNumber(input?: RegisterByPhoneNumberInput, options?: any) {
            return RegisterApiFp(configuration).registerByPhoneNumber(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOnlyPhoneNumber(input?: RegisterOnlyPhoneNumberInput, options?: any) {
            return RegisterApiFp(configuration).registerOnlyPhoneNumber(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
            return RegisterApiFp(configuration).sendEmailCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
            return RegisterApiFp(configuration).sendPhoneNumberCode(input, options)(fetch, basePath);
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @summary 注册
     * @param {RegisterInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public register(input?: RegisterInput, options?: any) {
        return RegisterApiFp(this.configuration).register(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过邮箱注册
     * @param {RegisterByEmailInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerByEmail(input?: RegisterByEmailInput, options?: any) {
        return RegisterApiFp(this.configuration).registerByEmail(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过手机号注册
     * @param {RegisterByPhoneNumberInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerByPhoneNumber(input?: RegisterByPhoneNumberInput, options?: any) {
        return RegisterApiFp(this.configuration).registerByPhoneNumber(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过手机号注册（只有手机号）
     * @param {RegisterOnlyPhoneNumberInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerOnlyPhoneNumber(input?: RegisterOnlyPhoneNumberInput, options?: any) {
        return RegisterApiFp(this.configuration).registerOnlyPhoneNumber(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 发送邮箱验证码
     * @param {SendConfirmEmailByCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
        return RegisterApiFp(this.configuration).sendEmailCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 注册时发送手机证码
     * @param {PhoneWithCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
        return RegisterApiFp(this.configuration).sendPhoneNumberCode(input, options)(this.fetch, this.basePath);
    }

}

/**
 * RestPasswordApi - fetch parameter creator
 * @export
 */
export const RestPasswordApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 通过邮箱重置密码
         * @param {ResetPasswordByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByEmail(input?: ResetPasswordByEmailInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/RestPassword/ResetPasswordByEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过手机重置密码
         * @param {ResetPasswordByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByPhoneNumber(input?: ResetPasswordByPhoneNumberInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/RestPassword/ResetPasswordByPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/RestPassword/SendEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/RestPassword/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestPasswordApi - functional programming interface
 * @export
 */
export const RestPasswordApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 通过邮箱重置密码
         * @param {ResetPasswordByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByEmail(input?: ResetPasswordByEmailInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).resetPasswordByEmail(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 通过手机重置密码
         * @param {ResetPasswordByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByPhoneNumber(input?: ResetPasswordByPhoneNumberInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).resetPasswordByPhoneNumber(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).sendEmailCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).sendPhoneNumberCode(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RestPasswordApi - factory interface
 * @export
 */
export const RestPasswordApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 通过邮箱重置密码
         * @param {ResetPasswordByEmailInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByEmail(input?: ResetPasswordByEmailInput, options?: any) {
            return RestPasswordApiFp(configuration).resetPasswordByEmail(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 通过手机重置密码
         * @param {ResetPasswordByPhoneNumberInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordByPhoneNumber(input?: ResetPasswordByPhoneNumberInput, options?: any) {
            return RestPasswordApiFp(configuration).resetPasswordByPhoneNumber(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 发送邮箱验证码
         * @param {SendConfirmEmailByCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
            return RestPasswordApiFp(configuration).sendEmailCode(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 注册时发送手机证码
         * @param {PhoneWithCaptchaInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
            return RestPasswordApiFp(configuration).sendPhoneNumberCode(input, options)(fetch, basePath);
        },
    };
};

/**
 * RestPasswordApi - object-oriented interface
 * @export
 * @class RestPasswordApi
 * @extends {BaseAPI}
 */
export class RestPasswordApi extends BaseAPI {
    /**
     * 
     * @summary 通过邮箱重置密码
     * @param {ResetPasswordByEmailInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    public resetPasswordByEmail(input?: ResetPasswordByEmailInput, options?: any) {
        return RestPasswordApiFp(this.configuration).resetPasswordByEmail(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 通过手机重置密码
     * @param {ResetPasswordByPhoneNumberInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    public resetPasswordByPhoneNumber(input?: ResetPasswordByPhoneNumberInput, options?: any) {
        return RestPasswordApiFp(this.configuration).resetPasswordByPhoneNumber(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 发送邮箱验证码
     * @param {SendConfirmEmailByCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    public sendEmailCode(input?: SendConfirmEmailByCaptchaInput, options?: any) {
        return RestPasswordApiFp(this.configuration).sendEmailCode(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 注册时发送手机证码
     * @param {PhoneWithCaptchaInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    public sendPhoneNumberCode(input?: PhoneWithCaptchaInput, options?: any) {
        return RestPasswordApiFp(this.configuration).sendPhoneNumberCode(input, options)(this.fetch, this.basePath);
    }

}

/**
 * RoleApi - fetch parameter creator
 * @export
 */
export const RoleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateRoleDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateRoleDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/GetAllPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleForEdit(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/GetRoleForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesAsync(permission?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/GetRolesAsync`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (permission !== undefined) {
                localVarQueryParameter['Permission'] = permission;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: RoleDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Role/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RoleDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateRoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateRoleDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoleDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoleDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoRoleDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).getAll(keyword, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoPermissionDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).getAllPermissions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleForEdit(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetRoleForEditOutput> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).getRoleForEdit(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesAsync(permission?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoRoleListDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).getRolesAsync(permission, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: RoleDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RoleDto> {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return RoleApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateRoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateRoleDto, options?: any) {
            return RoleApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return RoleApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, skipCount?: number, maxResultCount?: number, options?: any) {
            return RoleApiFp(configuration).getAll(keyword, skipCount, maxResultCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPermissions(options?: any) {
            return RoleApiFp(configuration).getAllPermissions(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleForEdit(id?: number, options?: any) {
            return RoleApiFp(configuration).getRoleForEdit(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [permission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesAsync(permission?: string, options?: any) {
            return RoleApiFp(configuration).getRolesAsync(permission, options)(fetch, basePath);
        },
        /**
         * 
         * @param {RoleDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: RoleDto, options?: any) {
            return RoleApiFp(configuration).update(input, options)(fetch, basePath);
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public _delete(id?: number, options?: any) {
        return RoleApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateRoleDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public create(input?: CreateRoleDto, options?: any) {
        return RoleApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public get(id?: number, options?: any) {
        return RoleApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getAll(keyword?: string, skipCount?: number, maxResultCount?: number, options?: any) {
        return RoleApiFp(this.configuration).getAll(keyword, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getAllPermissions(options?: any) {
        return RoleApiFp(this.configuration).getAllPermissions(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getRoleForEdit(id?: number, options?: any) {
        return RoleApiFp(this.configuration).getRoleForEdit(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [permission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getRolesAsync(permission?: string, options?: any) {
        return RoleApiFp(this.configuration).getRolesAsync(permission, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RoleDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public update(input?: RoleDto, options?: any) {
        return RoleApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

}

/**
 * SecurityConfigurationServiceApi - fetch parameter creator
 * @export
 */
export const SecurityConfigurationServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SecurityConfigurationService/GetSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SecuritySettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: SecuritySettingDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SecurityConfigurationService/SetSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SecuritySettingDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityConfigurationServiceApi - functional programming interface
 * @export
 */
export const SecurityConfigurationServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SettingsEditOutput> {
            const localVarFetchArgs = SecurityConfigurationServiceApiFetchParamCreator(configuration).getSetting(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SecuritySettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: SecuritySettingDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SecurityConfigurationServiceApiFetchParamCreator(configuration).setSetting(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SecurityConfigurationServiceApi - factory interface
 * @export
 */
export const SecurityConfigurationServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSetting(options?: any) {
            return SecurityConfigurationServiceApiFp(configuration).getSetting(options)(fetch, basePath);
        },
        /**
         * 
         * @param {SecuritySettingDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSetting(input?: SecuritySettingDto, options?: any) {
            return SecurityConfigurationServiceApiFp(configuration).setSetting(input, options)(fetch, basePath);
        },
    };
};

/**
 * SecurityConfigurationServiceApi - object-oriented interface
 * @export
 * @class SecurityConfigurationServiceApi
 * @extends {BaseAPI}
 */
export class SecurityConfigurationServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityConfigurationServiceApi
     */
    public getSetting(options?: any) {
        return SecurityConfigurationServiceApiFp(this.configuration).getSetting(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SecuritySettingDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityConfigurationServiceApi
     */
    public setSetting(input?: SecuritySettingDto, options?: any) {
        return SecurityConfigurationServiceApiFp(this.configuration).setSetting(input, options)(this.fetch, this.basePath);
    }

}

/**
 * SessionApi - fetch parameter creator
 * @export
 */
export const SessionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentLoginInformations(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Session/GetCurrentLoginInformations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentLoginInformations(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetCurrentLoginInformationsOutput> {
            const localVarFetchArgs = SessionApiFetchParamCreator(configuration).getCurrentLoginInformations(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentLoginInformations(options?: any) {
            return SessionApiFp(configuration).getCurrentLoginInformations(options)(fetch, basePath);
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public getCurrentLoginInformations(options?: any) {
        return SessionApiFp(this.configuration).getCurrentLoginInformations(options)(this.fetch, this.basePath);
    }

}

/**
 * SysFunApi - fetch parameter creator
 * @export
 */
export const SysFunApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateSysFunDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateSysFunDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options: any = {}): FetchArgs {
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling deleteBatch.');
            }
            const localVarPath = `/api/services/app/SysFun/DeleteBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (value) {
                localVarQueryParameter['Value'] = value;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownList(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/GetDropDownList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取带tag的分组
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAndTagList(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/GetGroupAndTagList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定分组下的TagName
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByGroupId(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/GetTagsByGroupId`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateSysFunDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateSysFunDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {UpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(input?: UpdateTagInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/SysFun/UpdateTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateTagInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysFunApi - functional programming interface
 * @export
 */
export const SysFunApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateSysFunDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListSysFunDto> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).deleteBatch(value, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListSysFunDto> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoGetListSysFunDto> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).getAll(filter, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NameValueDtoInt32>> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).getDropDownList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取带tag的分组
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAndTagList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GetGroupAndTagListDto>> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).getGroupAndTagList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取指定分组下的TagName
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByGroupId(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).getTagsByGroupId(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateSysFunDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetListSysFunDto> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新标签
         * @param {UpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(input?: UpdateTagInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SysFunApiFetchParamCreator(configuration).updateTag(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SysFunApi - factory interface
 * @export
 */
export const SysFunApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return SysFunApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateSysFunDto, options?: any) {
            return SysFunApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<number>} value 数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBatch(value: Array<number>, options?: any) {
            return SysFunApiFp(configuration).deleteBatch(value, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return SysFunApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filter] 过滤条件
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return SysFunApiFp(configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownList(options?: any) {
            return SysFunApiFp(configuration).getDropDownList(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取带tag的分组
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupAndTagList(options?: any) {
            return SysFunApiFp(configuration).getGroupAndTagList(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取指定分组下的TagName
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByGroupId(id?: number, options?: any) {
            return SysFunApiFp(configuration).getTagsByGroupId(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateSysFunDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateSysFunDto, options?: any) {
            return SysFunApiFp(configuration).update(input, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新标签
         * @param {UpdateTagInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(input?: UpdateTagInput, options?: any) {
            return SysFunApiFp(configuration).updateTag(input, options)(fetch, basePath);
        },
    };
};

/**
 * SysFunApi - object-oriented interface
 * @export
 * @class SysFunApi
 * @extends {BaseAPI}
 */
export class SysFunApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public _delete(id?: number, options?: any) {
        return SysFunApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateSysFunDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public create(input?: CreateSysFunDto, options?: any) {
        return SysFunApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<number>} value 数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public deleteBatch(value: Array<number>, options?: any) {
        return SysFunApiFp(this.configuration).deleteBatch(value, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public get(id?: number, options?: any) {
        return SysFunApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filter] 过滤条件
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public getAll(filter?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return SysFunApiFp(this.configuration).getAll(filter, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public getDropDownList(options?: any) {
        return SysFunApiFp(this.configuration).getDropDownList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取带tag的分组
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public getGroupAndTagList(options?: any) {
        return SysFunApiFp(this.configuration).getGroupAndTagList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取指定分组下的TagName
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public getTagsByGroupId(id?: number, options?: any) {
        return SysFunApiFp(this.configuration).getTagsByGroupId(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateSysFunDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public update(input?: UpdateSysFunDto, options?: any) {
        return SysFunApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新标签
     * @param {UpdateTagInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFunApi
     */
    public updateTag(input?: UpdateTagInput, options?: any) {
        return SysFunApiFp(this.configuration).updateTag(input, options)(this.fetch, this.basePath);
    }

}

/**
 * TagApi - fetch parameter creator
 * @export
 */
export const TagApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取全部的Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tag/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部的非系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotSystemTag(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tag/GetAllNotSystemTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部的系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSystemTag(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tag/GetAllSystemTag`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取全部的Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).getAll(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取全部的非系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotSystemTag(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).getAllNotSystemTag(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取全部的系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSystemTag(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = TagApiFetchParamCreator(configuration).getAllSystemTag(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 获取全部的Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any) {
            return TagApiFp(configuration).getAll(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取全部的非系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotSystemTag(options?: any) {
            return TagApiFp(configuration).getAllNotSystemTag(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取全部的系统Tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSystemTag(options?: any) {
            return TagApiFp(configuration).getAllSystemTag(options)(fetch, basePath);
        },
    };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @summary 获取全部的Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getAll(options?: any) {
        return TagApiFp(this.configuration).getAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取全部的非系统Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getAllNotSystemTag(options?: any) {
        return TagApiFp(this.configuration).getAllNotSystemTag(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取全部的系统Tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getAllSystemTag(options?: any) {
        return TagApiFp(this.configuration).getAllSystemTag(options)(this.fetch, this.basePath);
    }

}

/**
 * TenantApi - fetch parameter creator
 * @export
 */
export const TenantApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tenant/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateTenantDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tenant/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateTenantDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tenant/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tenant/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: TenantDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/Tenant/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TenantDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TenantApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateTenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateTenantDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TenantDto> {
            const localVarFetchArgs = TenantApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TenantDto> {
            const localVarFetchArgs = TenantApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoTenantDto> {
            const localVarFetchArgs = TenantApiFetchParamCreator(configuration).getAll(keyword, isActive, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {TenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: TenantDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TenantDto> {
            const localVarFetchArgs = TenantApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return TenantApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateTenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateTenantDto, options?: any) {
            return TenantApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return TenantApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any) {
            return TenantApiFp(configuration).getAll(keyword, isActive, skipCount, maxResultCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {TenantDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: TenantDto, options?: any) {
            return TenantApiFp(configuration).update(input, options)(fetch, basePath);
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public _delete(id?: number, options?: any) {
        return TenantApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateTenantDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public create(input?: CreateTenantDto, options?: any) {
        return TenantApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public get(id?: number, options?: any) {
        return TenantApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {boolean} [isActive] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any) {
        return TenantApiFp(this.configuration).getAll(keyword, isActive, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {TenantDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public update(input?: TenantDto, options?: any) {
        return TenantApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

}

/**
 * TokenAuthApi - fetch parameter creator
 * @export
 */
export const TokenAuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(model?: AuthenticateModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/TokenAuth/Authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AuthenticateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExternalAuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalAuthenticate(model?: ExternalAuthenticateModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/TokenAuth/ExternalAuthenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExternalAuthenticateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(model || {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalAuthenticationProviders(options: any = {}): FetchArgs {
            const localVarPath = `/api/TokenAuth/GetExternalAuthenticationProviders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenAuthApi - functional programming interface
 * @export
 */
export const TokenAuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(model?: AuthenticateModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AuthenticateResultModel> {
            const localVarFetchArgs = TokenAuthApiFetchParamCreator(configuration).authenticate(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ExternalAuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalAuthenticate(model?: ExternalAuthenticateModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExternalAuthenticateResultModel> {
            const localVarFetchArgs = TokenAuthApiFetchParamCreator(configuration).externalAuthenticate(model, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalAuthenticationProviders(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ExternalLoginProviderInfoModel>> {
            const localVarFetchArgs = TokenAuthApiFetchParamCreator(configuration).getExternalAuthenticationProviders(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TokenAuthApi - factory interface
 * @export
 */
export const TokenAuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {AuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(model?: AuthenticateModel, options?: any) {
            return TokenAuthApiFp(configuration).authenticate(model, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ExternalAuthenticateModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalAuthenticate(model?: ExternalAuthenticateModel, options?: any) {
            return TokenAuthApiFp(configuration).externalAuthenticate(model, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalAuthenticationProviders(options?: any) {
            return TokenAuthApiFp(configuration).getExternalAuthenticationProviders(options)(fetch, basePath);
        },
    };
};

/**
 * TokenAuthApi - object-oriented interface
 * @export
 * @class TokenAuthApi
 * @extends {BaseAPI}
 */
export class TokenAuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthenticateModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenAuthApi
     */
    public authenticate(model?: AuthenticateModel, options?: any) {
        return TokenAuthApiFp(this.configuration).authenticate(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ExternalAuthenticateModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenAuthApi
     */
    public externalAuthenticate(model?: ExternalAuthenticateModel, options?: any) {
        return TokenAuthApiFp(this.configuration).externalAuthenticate(model, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenAuthApi
     */
    public getExternalAuthenticationProviders(options?: any) {
        return TokenAuthApiFp(this.configuration).getExternalAuthenticationProviders(options)(this.fetch, this.basePath);
    }

}

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BatchActiveUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchActiveUser(input?: BatchActiveUserInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/BatchActiveUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchActiveUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDelete(input?: ArrayDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/BatchDelete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUnlockUser(input?: ArrayDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/BatchUnlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeUserLanguageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLanguage(input?: ChangeUserLanguageDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/ChangeLanguage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangeUserLanguageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangePasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/ChangePassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangePasswordDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateUserDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部人员下拉列表
         * @param {Array<1 | 2 | 4 | 8>} [roleTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllList(roleTypes?: Array<1 | 2 | 4 | 8>, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetAllList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleTypes) {
                localVarQueryParameter['roleTypes'] = roleTypes;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetRoles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserForEdit(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetUserForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOfUserName(userName?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetUserOfUserName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsForEdit(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetUserPermissionsForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (permission !== undefined) {
                localVarQueryParameter['Permission'] = permission;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToExcel(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/GetUsersToExcel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (permission !== undefined) {
                localVarQueryParameter['Permission'] = permission;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(input?: ResetPasswordDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/ResetPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserSpecificPermissions(input?: EntityDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/ResetUserSpecificPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleActiveStatus(input?: EntityDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/ToggleActiveStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUser(input?: EntityDtoInt64, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/UnlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateUserDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCurrentUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(input?: UpdateCurrentUserInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/UpdateCurrentUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateCurrentUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserPermissionsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermissions(input?: UpdateUserPermissionsInput, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/User/UpdateUserPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateUserPermissionsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(input || {}) : (input || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BatchActiveUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchActiveUser(input?: BatchActiveUserInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).batchActiveUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDelete(input?: ArrayDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).batchDelete(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUnlockUser(input?: ArrayDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).batchUnlockUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ChangeUserLanguageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLanguage(input?: ChangeUserLanguageDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).changeLanguage(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ChangePasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).changePassword(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).create(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoUserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAll(keyword, isActive, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取全部人员下拉列表
         * @param {Array<1 | 2 | 4 | 8>} [roleTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllList(roleTypes?: Array<1 | 2 | 4 | 8>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserMiniDto>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAllList(roleTypes, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListResultDtoRoleListDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getRoles(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserForEdit(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUserForEditOutput> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserForEdit(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOfUserName(userName?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserOfUserName(userName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsForEdit(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUserPermissionsForEditOutput> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserPermissionsForEdit(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoUserListDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUsers(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToExcel(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FileDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUsersToExcel(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(input?: ResetPasswordDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).resetPassword(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserSpecificPermissions(input?: EntityDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).resetUserSpecificPermissions(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleActiveStatus(input?: EntityDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).toggleActiveStatus(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUser(input?: EntityDtoInt64, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).unlockUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateUserDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).update(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateCurrentUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(input?: UpdateCurrentUserInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateCurrentUser(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateUserPermissionsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermissions(input?: UpdateUserPermissionsInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUserPermissions(input, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id?: number, options?: any) {
            return UserApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BatchActiveUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchActiveUser(input?: BatchActiveUserInput, options?: any) {
            return UserApiFp(configuration).batchActiveUser(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchDelete(input?: ArrayDtoInt64, options?: any) {
            return UserApiFp(configuration).batchDelete(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ArrayDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUnlockUser(input?: ArrayDtoInt64, options?: any) {
            return UserApiFp(configuration).batchUnlockUser(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ChangeUserLanguageDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLanguage(input?: ChangeUserLanguageDto, options?: any) {
            return UserApiFp(configuration).changeLanguage(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ChangePasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(input?: ChangePasswordDto, options?: any) {
            return UserApiFp(configuration).changePassword(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(input?: CreateUserDto, options?: any) {
            return UserApiFp(configuration).create(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: any) {
            return UserApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [keyword] 
         * @param {boolean} [isActive] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any) {
            return UserApiFp(configuration).getAll(keyword, isActive, skipCount, maxResultCount, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取全部人员下拉列表
         * @param {Array<1 | 2 | 4 | 8>} [roleTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllList(roleTypes?: Array<1 | 2 | 4 | 8>, options?: any) {
            return UserApiFp(configuration).getAllList(roleTypes, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: any) {
            return UserApiFp(configuration).getRoles(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserForEdit(id?: number, options?: any) {
            return UserApiFp(configuration).getUserForEdit(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [userName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOfUserName(userName?: string, options?: any) {
            return UserApiFp(configuration).getUserOfUserName(userName, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissionsForEdit(id?: number, options?: any) {
            return UserApiFp(configuration).getUserPermissionsForEdit(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return UserApiFp(configuration).getUsers(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
         * @param {string} [permission] 拥有此权限的用户
         * @param {number} [role] 拥有此角色的用户
         * @param {string} [name] 姓名
         * @param {string} [userName] 用户名
         * @param {string} [phoneNumber] 手机号
         * @param {string} [sorting] 排序字段
         * @param {number} [maxResultCount] 每页数据条数
         * @param {number} [skipCount] 跳过数据条数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersToExcel(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
            return UserApiFp(configuration).getUsersToExcel(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ResetPasswordDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(input?: ResetPasswordDto, options?: any) {
            return UserApiFp(configuration).resetPassword(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserSpecificPermissions(input?: EntityDtoInt64, options?: any) {
            return UserApiFp(configuration).resetUserSpecificPermissions(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleActiveStatus(input?: EntityDtoInt64, options?: any) {
            return UserApiFp(configuration).toggleActiveStatus(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {EntityDtoInt64} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlockUser(input?: EntityDtoInt64, options?: any) {
            return UserApiFp(configuration).unlockUser(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateUserDto} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(input?: UpdateUserDto, options?: any) {
            return UserApiFp(configuration).update(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateCurrentUserInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(input?: UpdateCurrentUserInput, options?: any) {
            return UserApiFp(configuration).updateCurrentUser(input, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateUserPermissionsInput} [input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPermissions(input?: UpdateUserPermissionsInput, options?: any) {
            return UserApiFp(configuration).updateUserPermissions(input, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public _delete(id?: number, options?: any) {
        return UserApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BatchActiveUserInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public batchActiveUser(input?: BatchActiveUserInput, options?: any) {
        return UserApiFp(this.configuration).batchActiveUser(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ArrayDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public batchDelete(input?: ArrayDtoInt64, options?: any) {
        return UserApiFp(this.configuration).batchDelete(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ArrayDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public batchUnlockUser(input?: ArrayDtoInt64, options?: any) {
        return UserApiFp(this.configuration).batchUnlockUser(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ChangeUserLanguageDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changeLanguage(input?: ChangeUserLanguageDto, options?: any) {
        return UserApiFp(this.configuration).changeLanguage(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ChangePasswordDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePassword(input?: ChangePasswordDto, options?: any) {
        return UserApiFp(this.configuration).changePassword(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateUserDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public create(input?: CreateUserDto, options?: any) {
        return UserApiFp(this.configuration).create(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public get(id?: number, options?: any) {
        return UserApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [keyword] 
     * @param {boolean} [isActive] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAll(keyword?: string, isActive?: boolean, skipCount?: number, maxResultCount?: number, options?: any) {
        return UserApiFp(this.configuration).getAll(keyword, isActive, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取全部人员下拉列表
     * @param {Array<1 | 2 | 4 | 8>} [roleTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllList(roleTypes?: Array<1 | 2 | 4 | 8>, options?: any) {
        return UserApiFp(this.configuration).getAllList(roleTypes, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getRoles(options?: any) {
        return UserApiFp(this.configuration).getRoles(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserForEdit(id?: number, options?: any) {
        return UserApiFp(this.configuration).getUserForEdit(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserOfUserName(userName?: string, options?: any) {
        return UserApiFp(this.configuration).getUserOfUserName(userName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserPermissionsForEdit(id?: number, options?: any) {
        return UserApiFp(this.configuration).getUserPermissionsForEdit(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
     * @param {string} [permission] 拥有此权限的用户
     * @param {number} [role] 拥有此角色的用户
     * @param {string} [name] 姓名
     * @param {string} [userName] 用户名
     * @param {string} [phoneNumber] 手机号
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return UserApiFp(this.configuration).getUsers(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filter] 模糊匹配  Name、Surname、UserName、EmailAddress
     * @param {string} [permission] 拥有此权限的用户
     * @param {number} [role] 拥有此角色的用户
     * @param {string} [name] 姓名
     * @param {string} [userName] 用户名
     * @param {string} [phoneNumber] 手机号
     * @param {string} [sorting] 排序字段
     * @param {number} [maxResultCount] 每页数据条数
     * @param {number} [skipCount] 跳过数据条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsersToExcel(filter?: string, permission?: string, role?: number, name?: string, userName?: string, phoneNumber?: string, sorting?: string, maxResultCount?: number, skipCount?: number, options?: any) {
        return UserApiFp(this.configuration).getUsersToExcel(filter, permission, role, name, userName, phoneNumber, sorting, maxResultCount, skipCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ResetPasswordDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetPassword(input?: ResetPasswordDto, options?: any) {
        return UserApiFp(this.configuration).resetPassword(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EntityDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetUserSpecificPermissions(input?: EntityDtoInt64, options?: any) {
        return UserApiFp(this.configuration).resetUserSpecificPermissions(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EntityDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public toggleActiveStatus(input?: EntityDtoInt64, options?: any) {
        return UserApiFp(this.configuration).toggleActiveStatus(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {EntityDtoInt64} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public unlockUser(input?: EntityDtoInt64, options?: any) {
        return UserApiFp(this.configuration).unlockUser(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateUserDto} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public update(input?: UpdateUserDto, options?: any) {
        return UserApiFp(this.configuration).update(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateCurrentUserInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateCurrentUser(input?: UpdateCurrentUserInput, options?: any) {
        return UserApiFp(this.configuration).updateCurrentUser(input, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateUserPermissionsInput} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserPermissions(input?: UpdateUserPermissionsInput, options?: any) {
        return UserApiFp(this.configuration).updateUserPermissions(input, options)(this.fetch, this.basePath);
    }

}

/**
 * UserLoginApi - fetch parameter creator
 * @export
 */
export const UserLoginApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentUserLoginAttempts(startDate?: Date, endDate?: Date, sorting?: string, skipCount?: number, maxResultCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/services/app/UserLogin/GetRecentUserLoginAttempts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any).toISOString();
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserLoginApi - functional programming interface
 * @export
 */
export const UserLoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentUserLoginAttempts(startDate?: Date, endDate?: Date, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PagedResultDtoUserLoginAttemptDto> {
            const localVarFetchArgs = UserLoginApiFetchParamCreator(configuration).getRecentUserLoginAttempts(startDate, endDate, sorting, skipCount, maxResultCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserLoginApi - factory interface
 * @export
 */
export const UserLoginApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentUserLoginAttempts(startDate?: Date, endDate?: Date, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
            return UserLoginApiFp(configuration).getRecentUserLoginAttempts(startDate, endDate, sorting, skipCount, maxResultCount, options)(fetch, basePath);
        },
    };
};

/**
 * UserLoginApi - object-oriented interface
 * @export
 * @class UserLoginApi
 * @extends {BaseAPI}
 */
export class UserLoginApi extends BaseAPI {
    /**
     * 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLoginApi
     */
    public getRecentUserLoginAttempts(startDate?: Date, endDate?: Date, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any) {
        return UserLoginApiFp(this.configuration).getRecentUserLoginAttempts(startDate, endDate, sorting, skipCount, maxResultCount, options)(this.fetch, this.basePath);
    }

}

/**
 * WopiApi - fetch parameter creator
 * @export
 */
export const WopiApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileInfo(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fileInfo.');
            }
            const localVarPath = `/Wopi/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, accessToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/Wopi/files/{id}/contents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putFile.');
            }
            const localVarPath = `/Wopi/files/{id}/contents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WopiApi - functional programming interface
 * @export
 */
export const WopiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileInfo(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WopiApiFetchParamCreator(configuration).fileInfo(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, accessToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WopiApiFetchParamCreator(configuration).get(id, accessToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = WopiApiFetchParamCreator(configuration).putFile(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WopiApi - factory interface
 * @export
 */
export const WopiApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileInfo(id: string, options?: any) {
            return WopiApiFp(configuration).fileInfo(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, accessToken?: string, options?: any) {
            return WopiApiFp(configuration).get(id, accessToken, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFile(id: string, options?: any) {
            return WopiApiFp(configuration).putFile(id, options)(fetch, basePath);
        },
    };
};

/**
 * WopiApi - object-oriented interface
 * @export
 * @class WopiApi
 * @extends {BaseAPI}
 */
export class WopiApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public fileInfo(id: string, options?: any) {
        return WopiApiFp(this.configuration).fileInfo(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public get(id: string, accessToken?: string, options?: any) {
        return WopiApiFp(this.configuration).get(id, accessToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WopiApi
     */
    public putFile(id: string, options?: any) {
        return WopiApiFp(this.configuration).putFile(id, options)(this.fetch, this.basePath);
    }

}

